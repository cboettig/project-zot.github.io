{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"admin-guide/admin-configuration/","title":"Configuring zot","text":"<p> The registry administrator configures zot primarily through settings in the configuration file. </p> <p>Using the information in this guide, you can compose a configuration file with the settings and features you require for your zot registry server.</p> <p>Before launching zot with a new configuration, we recommend that you verify the syntax of your configuration as described in Verifying the configuration file.</p>"},{"location":"admin-guide/admin-configuration/#configuration-file","title":"Configuration file","text":"<p>The configuration file is a JSON or YAML file that contains all configuration settings for zot functions such as:</p> <ul> <li>network</li> <li>storage</li> <li>authentication</li> <li>authorization</li> <li>logging</li> <li>metrics</li> <li>synchronization with other registries</li> <li>clustering</li> </ul> <p>The zot service is initiated with the <code>zot serve</code> command followed by the name of a configuration file, as in this example:</p> <p><code>zot serve config.json</code></p>  <p> The instructions and examples in this guide use <code>zot</code> as the name of the zot executable file. The examples do not include the path to the executable file.</p>  <p>When you first build zot or deploy an image or container from the distribution, a basic configuration file <code>config.json</code> is created. This initial file is similar to the following example:</p> <pre><code>{\n    \"distSpecVersion\": \"1.0.1\",\n    \"storage\": {\n        \"rootDirectory\": \"/tmp/zot\"\n    },\n    \"http\": {\n        \"address\": \"127.0.0.1\",\n        \"port\": \"8080\"\n    },\n    \"log\": {\n        \"level\": \"debug\"\n    }\n}\n</code></pre> <p>The configuration file contains the Distribution Specification version (<code>distSpecVersion</code>). The structure and content of other attributes are described in the later sections of this guide.</p>"},{"location":"admin-guide/admin-configuration/#extensions","title":"Extensions","text":"<p>Additional registry features that are not a part of the Distribution Specification are allowed to be added as Extensions.  </p> <p>With a full (not minimal) zot image, the additional extension features can be enabled and configured under an <code>extensions</code> attribute in the configuration file as shown in the following example.</p> <pre><code>{\n  ...\n  \"extensions\": {\n    \"metrics\": {},\n    \"sync\": {},\n    \"search\": {},\n    \"scrub\": {},\n    \"lint\": {}\n  }\n}\n</code></pre>  <p> The extension features are available only with a full zot image. With a minimal zot image, the <code>extensions</code> section is ignored if present.</p>  <p>The following features are configured under the <code>extensions</code> attribute.</p> <ul> <li>Metrics</li> <li>Sync</li> <li>Search</li> <li>Scrub</li> <li>Lint</li> </ul> <p>An extension feature is enabled by the presence of the feature\u2019s attribute under <code>extensions</code>. An extension feature can be disabled by omitting the feature attribute or by including an <code>enable</code> attribute with a value of <code>false</code>.</p> <p>For example, the scrub feature is enabled in the following cases.</p> <pre><code>\"extensions\": {\n  \"scrub\": {}\n}\n</code></pre> <pre><code>\"extensions\": {\n  \"scrub\": {\n    \"enable\": true\n  }\n}\n</code></pre> <p>The scrub feature is disabled in the following cases.</p> <pre><code>\"extensions\": {\n}\n</code></pre> <pre><code>\"extensions\": {\n  \"scrub\": {\n    \"enable\": false\n  }\n}\n</code></pre>  <p> New functionality can be added to the zot registry by developing custom extensions for integration into zot. For information about developing extensions, see Developing New Extensions.</p>"},{"location":"admin-guide/admin-configuration/#network-configuration","title":"Network configuration","text":"<p>Use the <code>http</code> attribute in the configuration file to configure the zot network settings, as shown in the following example.</p> <pre><code>\"http\": {\n  \"address\":\"127.0.0.1\",\n  \"port\":\"8080\",\n  \"realm\":\"zot\",\n  \"tls\": {\n    \"cert\":\"test/data/server.cert\",\n    \"key\":\"test/data/server.key\"\n  }\n}\n</code></pre> <p>The following table lists the configurable attributes.</p>    Attribute Description     <code>address</code> The IP address of the zot server.   <code>port</code> The port number of the zot server.   <code>realm</code> The security policy domain defined for the server.   <code>tls</code> The included attributes in this section specify the Transport Layer Security (TLS) settings for the server.   <code>cert</code> The path and filename of the server\u2019s SSL/TLS certificate.   <code>key</code> The path and filename of the server\u2019s registry key."},{"location":"admin-guide/admin-configuration/#storage-configuration","title":"Storage configuration","text":""},{"location":"admin-guide/admin-configuration/#storage-options","title":"Storage options","text":"<p>With zot, you have the option to store your registry image files either in local filesystem storage or in cloud storage, such as an Amazon Simple Storage Service (S3) bucket.</p>"},{"location":"admin-guide/admin-configuration/#configuring-local-storage","title":"Configuring local storage","text":"<p>Local filesystem storage for zot is configured with the <code>storage</code> attribute in the configuration file, as shown in the following example.</p> <pre><code>\"storage\":{\n  \"rootDirectory\":\"/tmp/zot\",\n  \"commit\": true,\n  \"dedupe\": true,\n  \"gc\": true,\n  \"gcDelay\": \"1h\",\n  \"gcInterval\": \"24h\"\n}\n</code></pre> <p>The following table lists the configurable attributes.</p>        Attribute Description     <p><code>rootDirectory</code></p> <p>Location of the images stored in the server file system.</p>   <p><code>commit</code></p> <p>For faster performance, data written by zot is retained in memory before being periodically committed to disk by the operating system. To eliminate this retention time and cause data to be written to disk immediately, set to <code>true</code>. This prevents data loss but reduces performance.</p>   <p><code>dedupe</code></p> <p>If the server filesystem supports hard links, you can optimize storage space by enabling inline deduplication of layers and blobs that are shared among multiple container images. Deduplication is enabled by default. Set to <code>false</code> to disable deduplication.</p>   <p><code>gc</code></p> <p>When an image is deleted, either by tag or by reference, orphaned blobs can lead to wasted storage. Garbage collection (gc) is enabled by default to reclaim this space. Set to <code>false</code> to disable garbage collection.</p>   <p><code>gcDelay</code></p> <p>(Optional) If garbage collection is enabled, causes it to run once after the specified delay time. The default is 1 hour. Requires the <code>gc</code> attribute to be <code>true</code>.</p>   <p><code>gcInterval</code></p> <p>(Optional) If garbage collection is enabled, causes periodic collection at the specified interval. Must be set based on use cases and user workloads. If no value is specified, there is no periodic collection. Requires the <code>gc</code> attribute to be <code>true</code>.</p>   <p><code>subpaths</code></p> <p>You can store and serve images from multiple filesystems, each with their own repository paths and settings. The following example shows three subpaths.</p> <pre><code>\"storage\":{\n  \"subPaths\": {\n    \"/a\": {\n      \"rootDirectory\": \"/tmp/zot1\",\n      \"dedupe\": true,\n      \"gc\": true\n    },\n    \"/b\": {\n      \"rootDirectory\": \"/tmp/zot2\",\n      \"dedupe\": true\n    },\n    \"/c\": {\n      \"rootDirectory\": \"/tmp/zot3\",\n      \"dedupe\": false\n    }\n  }\n}</code></pre>"},{"location":"admin-guide/admin-configuration/#configuring-s3-storage","title":"Configuring S3 storage","text":"<p>Amazon Simple Storage Service (S3) for zot can be configured with the <code>storageDriver</code> attribute in the configuration file, as shown in the following example:</p> <pre><code>\"storageDriver\": {\n    \"name\": \"s3\",\n    \"region\": \"us-east-2\",\n    \"bucket\": \"zot-storage\",\n    \"secure\": true,\n    \"skipverify\": false,\n    \"accesskey\": \"&lt;YOUR_ACCESS_KEY_ID&gt;\",\n    \"secretkey\": \"&lt;YOUR_SECRET_ACCESS_KEY&gt;\"\n}\n</code></pre> <p>As in the case with local filesystem storage, you can use multiple storage locations using the <code>subpath</code> attribute, as in the following example.</p> <pre><code>\"subPaths\": {\n    \"/a\": {\n        \"rootDirectory\": \"/zot-a\",\n        \"storageDriver\": {\n            \"name\": \"s3\",\n            \"region\": \"us-east-2\",\n            \"bucket\": \"zot-storage\",\n            \"secure\": true,\n            \"skipverify\": false\n        }\n    },\n    \"/b\": {\n\n...\n\n    }\n}\n</code></pre> <p>The <code>subPaths</code> feature ties together several separate storage filesystems and backends behind the same HTTP API interface. In the example above, both repository paths \"/a\" and \"/b\" are exposed to clients. Content on these two paths can be hosted completely separately by different storage services, locations, or filesystems, with no difference to the user interface and no perceptible difference to the user experience. This is useful if one wants to serve existing OCI images from different backends or if storage can be expanded only by using different backing stores.</p>"},{"location":"admin-guide/admin-configuration/#s3-credentials","title":"S3 Credentials","text":"<p>In the first configuration file example, the S3 credentials were configured with the attributes <code>accesskey</code> and <code>secretkey.</code> As an alternative, you can omit these attributes from the configuration file and you can configure them using environment variables or a credential file.</p> <ul> <li> <p>Environment variables</p> <p>zot looks for credentials in the following environment variables:</p> <pre><code>AWS_ACCESS_KEY_ID\nAWS_SECRET_ACCESS_KEY\nAWS_SESSION_TOKEN (optional)\n</code></pre> </li> <li> <p>Credential file</p> <p>A credential file is a plaintext file that contains your access keys, as shown in the following example.</p> <pre><code>[default]\naws_access_key_id = &lt;YOUR_DEFAULT_ACCESS_KEY_ID&gt;\naws_secret_access_key = &lt;YOUR_DEFAULT_SECRET_ACCESS_KEY&gt;\n\n[test-account]\naws_access_key_id = &lt;YOUR_TEST_ACCESS_KEY_ID&gt;\naws_secret_access_key = &lt;YOUR_TEST_SECRET_ACCESS_KEY&gt;\n\n[prod-account]\n; work profile\naws_access_key_id = &lt;YOUR_PROD_ACCESS_KEY_ID&gt;\naws_secret_access_key = &lt;YOUR_PROD_SECRET_ACCESS_KEY&gt;\n</code></pre> <p>The <code>[default]</code> heading defines credentials for the default profile, which zot will use unless you configure it to use another profile. You can specify a profile using the <code>AWS_PROFILE</code> environment variable as in this example:</p> <pre><code>AWS_PROFILE=test-account\n</code></pre> <p>The credential file must be named <code>credentials.</code> The file must be located in the <code>.aws/</code> folder in the home directory of the same server that is running your zot application.</p> </li> </ul> <p>For more details about specifying S3 credentials, see the AWS documentation.</p>"},{"location":"admin-guide/admin-configuration/#security-and-hardening","title":"Security and hardening","text":""},{"location":"admin-guide/admin-configuration/#authentication","title":"Authentication","text":"<p>zot supports authentication by the following methods:</p> <ul> <li> <p>TLS mutual authentication</p> </li> <li> <p>Basic local authentication using an htpasswd file</p> </li> <li> <p>LDAP authentication</p> </li> <li> <p>Bearer (OAuth2) authentication using an HTTP Bearer token</p> </li> </ul> <p>For detailed information about configuring authentication for your zot registry, see User Authentication and Authorization with zot.</p>"},{"location":"admin-guide/admin-configuration/#identity-based-authorization","title":"Identity-based authorization","text":"<p>User identity can be used as an authorization criterion for allowing actions on one or more repository paths. For specific users, you can choose to allow any combination of read, create, update, or delete actions on specific repository paths.</p> <p>For detailed information about configuring access control policies for your zot registry, see User Authentication and Authorization with zot.</p>"},{"location":"admin-guide/admin-configuration/#preventing-automated-attacks-with-failure-delay","title":"Preventing automated attacks with failure delay","text":"<p>Use the <code>auth</code> and <code>failDelay</code> attributes under <code>http</code> in the configuration file to delay the response to an authentication failure. A delayed response helps to prevent automated attacks. The configuration is shown in the following example.</p> <pre><code>\"http\": {\n  \"auth\": {\n    \"failDelay\": 5\n  }\n}\n</code></pre> <p>The <code>failDelay</code> attribute specifies a waiting time, in seconds, before zot sends a failure notification to an authenticating user who has been denied access.</p>"},{"location":"admin-guide/admin-configuration/#rate-limiting","title":"Rate limiting","text":"<p>You can limit the rate of API calls from users by configuring the <code>Ratelimit</code> attribute in the configuration file, as shown in the following example:</p> <pre><code>\"http\": {\n    \"address\": \"127.0.0.1\",\n    \"port\": \"8080\",\n    \"Ratelimit\": {\n        \"Rate\": 10,\n        \"Methods\": [\n            {\n                \"Method\": \"GET\",\n                \"Rate\": 5\n            }\n        ]\n    }\n}\n</code></pre> <p>In this example, the <code>Rate</code> attribute directly under <code>Ratelimit</code> sets a global rate limit of ten API calls per second. You can optionally override the global limit for specific API <code>Methods</code>. In this example, API <code>GET</code> calls are limited to five per second.</p>"},{"location":"admin-guide/admin-configuration/#additional-security-features","title":"Additional security features","text":"<p>For detailed information about configuring additional security features for your zot registry, see Security Posture.</p>"},{"location":"admin-guide/admin-configuration/#monitoring","title":"Monitoring","text":"<p>zot supports a range of monitoring tools including the following:</p> <ul> <li> <p>Logging</p> <p>Logging for zot operations is configured with the <code>log</code> attribute in the configuration file.</p> </li> <li> <p>Metrics</p> </li> </ul> <p>Metrics data is available in a Prometheus format. A full zot image with extensions includes a node exporter. A minimal zot image can use an external node exporter such as <code>zxp</code>.</p> <ul> <li>Benchmarking</li> </ul> <p>The zot project includes the <code>zb</code> tool, which allows you to benchmark a zot registry or any other container image registry that conforms to the OCI Distribution Specification.</p> <p>When zot is deployed in a Kubernetes setup, a site reliability engineering (SRE) operator can monitor service level indicators (SLI) such as metrics and logs. Metrics will appear in Prometheus using the zot <code>metrics</code> extension, while logs will appear in the Elasticsearch stack (ELK stack) using Filebeat.</p> <p>For detailed information about the monitoring tools, see Monitoring the registry.</p> <p>For detailed information about benchmarking, see Benchmarking zot with zb.</p>"},{"location":"admin-guide/admin-configuration/#clustering-zot","title":"Clustering zot","text":"<p>To ensure high-availability of the registry, zot supports a clustering scheme with stateless zot instances/replicas fronted by a loadbalancer and a shared remote backend storage. This scheme allows the registry service to remain available even if a few replicas fail or become unavailable. Loadbalancing across many zot replicas can also increase aggregate network throughput.</p> <p>For detailed information about clustering with zot, see zot Clustering.</p>"},{"location":"admin-guide/admin-configuration/#syncing-and-mirroring-registries","title":"Syncing and mirroring registries","text":"<p>A zot registry can mirror one or more upstream OCI registries, including popular cloud registries such as Docker Hub and Google Container Registry.  If an upstream registry is OCI distribution-spec conformant for pulling images, you can use zot's <code>sync</code> extension feature to implement a downstream mirror, synchronizing OCI images and corresponding artifacts. Synchronization between registries can be implemented by periodic polling of the upstream registry or synchronization can occur on demand, when a user pulls an image from the downstream registry.</p> <p>As with git, wherein every clone is a full repository, you can configure a local zot instance to be a full OCI mirror registry. This allows for a fully distributed disconnected container image build pipeline.</p> <p>For detailed information about syncing and mirroring, see OCI Registry Mirroring With zot.</p>"},{"location":"admin-guide/admin-configuration/#linting-uploaded-images","title":"Linting uploaded images","text":"<p>The lint extension can check an uploaded image to enforce the presence of required annotations such as the author or the license.</p> <p>To configure linting, add the <code>lint</code> attribute under <code>extensions</code> in the configuration file, as shown in the following example:</p> <pre><code>\"extensions\": {\n    \"lint\": {\n      \"enable\": true,\n      \"mandatoryAnnotations\": [\"annot1\", \"annot2\", \"annot3\"]\n      }\n  }\n</code></pre> <p>The following table lists the configurable attributes of the <code>lint</code> extension.</p>    Attribute Description     <code>enable</code> If this attribute is missing, incoming image linting is disabled by default. Linting can be enabled by including this attribute and setting it to <code>true</code>.   <code>mandatoryAnnotations</code> A list of annotations that are required to be present in the image being pushed to the repository.    <p>If the mandatory annotations option is configured when you push an image, linter will verify that the mandatory annotations list present in the configuration is also found in the manifest's annotations list. If any annotations are missing, the push is denied.</p>"},{"location":"admin-guide/admin-configuration/#scrubbing-the-image-registry","title":"Scrubbing the image registry","text":"<p>To check the integrity of the filesystem and the data in the registry, you can schedule a periodic scrub operation. The scrub process traverses the filesystem, verifying that all data blocks are readable. While running, the process may slightly reduce the registry performance.</p> <p>To enable scrubbing, add the <code>scrub</code> attribute under <code>extensions</code> in the configuration file, as shown in the following example:</p> <pre><code>\"extensions\": {\n  \"scrub\": {\n    \"enable\": true,\n    \"interval\": \"24h\"\n  }\n}\n</code></pre> <p>The following table lists the configurable attributes for scrubbing the registry.</p>    Attribute Description     <code>enable</code> If this attribute is missing, registry scrubbing is enabled by default. Scrubbing can be disabled by setting this attribute to <code>false</code>.   <code>interval</code> The time interval between periodic scrub operations. This value must be at least two hours (<code>2h</code>)."},{"location":"admin-guide/admin-configuration/#enhanced-searching-and-querying-images","title":"Enhanced searching and querying images","text":"<p>While basic searching is always enabled for images in the zot registry, you can enable enhanced registry searching and filtering using graphQL.</p> <p>Add the <code>search</code> attribute under <code>extensions</code> in the configuration file to enable and configure the enhanced search extension, as shown in the following example.</p> <pre><code>\"extensions\": {\n    \"search\": {\n        \"enable\": true,\n        \"cve\": {\n            \"updateInterval\": \"2h\"\n        }\n    }\n}\n</code></pre> <p>The following table lists the configurable attributes for enhanced search.</p>    Attribute Description     <code>enable</code> If this attribute is missing, enhanced search is enabled by default. Enhanced search can be disabled by setting this attribute to <code>false</code>.   <code>cve</code> Extends enhanced search to allow searching of Common Vulnerabilities and Exposures (CVE).   <code>updateInterval</code> Sets the interval at which the searchable database of CVE items is refreshed."},{"location":"admin-guide/admin-configuration/#verifying-the-configuration-file","title":"Verifying the configuration file","text":"<p>Before launching zot, verify the syntax of your configuration file using the following command:</p> <p><code>zot verify &lt;configfile&gt;</code></p>  <p> Verifying the configuration file protects against operator errors and any conflicts arising from zot release version changes.</p>  <p>After verifying your configuration file, you can launch zot with the following command:</p> <p><code>zot serve &lt;configfile&gt;</code></p>"},{"location":"admin-guide/admin-getting-started/","title":"Getting Started with zot Administration","text":"<p> This document helps you to deploy an appropriate zot image or to build zot if desired.</p> <p>After deploying zot, proceed to Configuring zot to choose and configure the features you need.</p>"},{"location":"admin-guide/admin-getting-started/#installing-zot","title":"Installing zot","text":""},{"location":"admin-guide/admin-getting-started/#how-to-get-zot","title":"How to get zot","text":"<p>The zot project is hosted on GitHub at project-zot. From GitHub, you can download zot executable binary images or full source code.</p>"},{"location":"admin-guide/admin-getting-started/#supported-platforms","title":"Supported platforms","text":"<p>zot is officially supported on Linux and Apple MacOS platforms, using Intel or ARM processors. However, development should be possible on any platform that supports the <code>golang</code> toolchain.</p>    OS ARCH Platform     linux amd64 Intel-based Linux servers   linux arm64 ARM-based servers and Raspberry Pi4   darwin amd64 Intel-based MacOS   darwin arm64 ARM-based MacOS"},{"location":"admin-guide/admin-getting-started/#about-binary-images","title":"About binary images","text":"<p>Executable binary zot images are available for multiple platforms and architectures and with full or minimal implementations.</p> <p>Refer to Released Images for zot for information about available zot images along with information about image variations, image locations, and image naming formats.</p>"},{"location":"admin-guide/admin-getting-started/#deployment-methods","title":"Deployment methods","text":"<p>Several options exist for deploying zot:</p> <ul> <li> <p>You can launch a zot binary as a container service using     a container management tool such as Podman, Docker, or Helm.</p> </li> <li> <p>You can launch zot as a host-level service by downloading     a binary image and running it as a systemd service.</p> </li> <li> <p>You can copy or clone the full zot source code and build     an image with custom build flags.</p> </li> </ul>"},{"location":"admin-guide/admin-getting-started/#deploying-a-zot-binary-image","title":"Deploying a zot binary image","text":"<p>Executable binary images for supported server platforms and architectures are available from the zot package repository in GitHub.</p> <p>You can download the appropriate binary image and run it directly on your server, or you can use a container management tool such as Podman, runc, Helm, or Docker to fetch and deploy the image in a container on your server.</p>  <p> For convenience, you can rename the binary image file to simply <code>zot</code>.</p>"},{"location":"admin-guide/admin-getting-started/#example-deploying-with-a-container-manager","title":"Example: Deploying with a container manager","text":"<p>Using a container manager such as Podman, runc, Helm, or Docker, you can install a zot binary image, as in the following examples.</p> <p>Using podman</p> <pre><code>podman run -p 5000:5000 ghcr.io/project-zot/zot-linux-amd64:latest\n\npodman run -p 5000:5000 ghcr.io/project-zot/zot-linux-amd64-minimal:latest\n</code></pre>  Click here to view an example of deploying using podman. <p>  </p>  <p>Using docker</p> <pre><code>docker run -p 5000:5000 ghcr.io/project-zot/zot-linux-amd64:latest\n</code></pre> <p>Each of these example commands pulls a zot binary image from the GitHub Container Registry (ghcr.io) and launches a zot image registry at http://localhost:5000.</p>  Click here to view an example of deploying using docker. <p>  </p>"},{"location":"admin-guide/admin-getting-started/#building-zot-from-source","title":"Building zot from source","text":""},{"location":"admin-guide/admin-getting-started/#prerequisites","title":"Prerequisites","text":""},{"location":"admin-guide/admin-getting-started/#install-golang-117","title":"Install golang (1.17+)","text":"<p>The zot project requires <code>golang 1.17</code> or newer. You can follow these instructions to install the <code>golang</code> toolchain. After installation, make sure that the <code>path</code> environment variable or your IDE can find the toolchain.</p>"},{"location":"admin-guide/admin-getting-started/#building-an-executable-binary-from-source","title":"Building an executable binary from source","text":"<p>Download or clone the full zot project from GitHub at project-zot. To clone the zot project from GitHub, use this command:</p> <pre><code>git clone https://github.com/project-zot/zot.git\n</code></pre> <p>To build zot, execute the <code>make</code> command in the <code>zot</code> directory using the following general syntax:</p> <p><code>make OS=os ARCH=architecture {binary | binary-minimal}</code></p>  <ul> <li> <p>The operating system and architecture options are listed in the     Supported platforms and     architectures     table. If an option is not specified, the defaults are <code>linux</code> and     <code>amd64</code>.</p> </li> <li> <p>The <code>binary</code> option builds the full zot binary image with     all extensions.</p> </li> <li> <p>The <code>binary-minimal</code> option builds the minimal distribution-spec     conformant zot binary image without extensions, reducing     the attack surface.</p> </li> </ul>  <p>For example, to build a zot image with extensions for an Intel-based linux server, use the following command:</p> <pre><code>make OS=linux ARCH=amd64 binary\n</code></pre> <p>The <code>make</code> command builds an executable image in the <code>zot/bin</code> directory. The original filename of the zot executable image will indicate the build options. For example, the filename of an Intel-based linux minimal image is <code>zot-linux-amd64-minimal</code>.</p>  <p> For convenience, you can rename the binary image file to simply <code>zot</code>.</p>"},{"location":"admin-guide/admin-getting-started/#building-a-zot-container-image-from-source","title":"Building a zot container image from source","text":"<p>with Stacker</p> <p>Using the settings in stacker.yaml, you can build a container image that runs the latest zot by running the following command:</p> <pre><code>make binary-stacker\n</code></pre> <p>with Docker</p> <p>A sample Dockerfile is provided on the zot project page in GitHub. You can edit the sample file with your specific values, such as the desired operating system, hardware architecture, and full or minimal build, as in this example:</p> <pre><code>ARG OS=linux\nARG ARCH=amd64\n\nRUN make COMMIT=$COMMIT OS=$OS ARCH=$ARCH clean binary-minimal\n</code></pre> <p>Using your edited Dockerfile, you can build a container image that runs the latest zot by running the following command:</p> <pre><code>make image\n</code></pre>"},{"location":"admin-guide/admin-getting-started/#deploying-the-container-image","title":"Deploying the container image","text":"<p>Deploy the image using your container manager, such as Podman, runc, Helm, or Docker, as in these examples:</p> <p>with Podman</p> <pre><code>podman run --rm -it -p 5000:5000 -v $(pwd)/registry:/var/lib/registry zot:latest\n</code></pre> <p>with Docker</p> <pre><code>docker run --rm -it -p 5000:5000 -v $(pwd)/registry:/var/lib/registry zot:latest\n</code></pre> <p>A container image built with the sample Dockerfile and deployed with the example command results in a running registry at <code>http://localhost:5000</code>. Registry content is stored at <code>.registry</code>, which is bind mounted to <code>/var/lib/registry</code> in the container. By default, auth is disabled. As part of the build, a YAML configuration file is created at <code>/etc/zot/config.yml</code> in the container.</p> <p>You can override the configuration file with custom configuration settings in the deployment command and in a local configuration file as shown in this example:</p> <pre><code>podman run --rm -p 8080:8080 \\\n  -v $(pwd)/custom-config.yml:/etc/zot/config.yml \\\n  -v $(pwd)/registry:/tmp/zot \\\n  zot:latest\n</code></pre> <p>This command causes the registry to listen on port 8080 and to use <code>/tmp/zot</code> for content storage.</p>"},{"location":"admin-guide/admin-getting-started/#additional-recommended-steps","title":"Additional recommended steps","text":"<p>We recommend that, when deploying zot, you also install the command line (zli) and benchmarking (zb) packages.</p>"},{"location":"admin-guide/admin-getting-started/#launching-zot","title":"Launching zot","text":"<p>The zot service is initiated with the <code>zot serve</code> command followed by the name of a configuration file, as in this example:</p> <p><code>zot serve config.yml</code></p>  <p> For convenience, you can rename the binary image file to simply <code>zot</code>.The instructions and examples in this guide use <code>zot</code> as the name of the zot executable file and do not include the path to the executable file.</p>"},{"location":"admin-guide/admin-getting-started/#next-steps","title":"Next Steps","text":""},{"location":"admin-guide/admin-getting-started/#configuring-zot","title":"Configuring zot","text":"<p>You configure zot primarily through adding and modifying settings in the zot configuration file. The configuration file is a JSON or YAML file that contains all configuration settings for zot functions. </p> <p>When you first build zot or deploy an image or container from the distribution, a basic configuration file <code>config.json</code> is created. You can modify the initial file or you can create a new file.</p> <p>Follow the instructions in Configuring zot, to compose a configuration file with the settings and features you require for your zot registry server.</p>"},{"location":"articles/authn-authz/","title":"User Authentication and Authorization with zot","text":"<p> A robust set of authentication/authorization options are supported:</p> <ul> <li> <p>Authentication</p> </li> <li> <p>TLS, including mTLS</p> </li> <li>Username/password or token-based user authentication</li> <li> <p>LDAP</p> <ul> <li>htpasswd</li> </ul> </li> <li> <p>Authorization</p> <ul> <li>Powerful identity-based access controls for repositories or specific repository paths</li> </ul> </li> </ul>  <p>The zot configuration model supports both authentication and authorization. Authentication credentials allow access to zot HTTP APIs. Authorization policies provide fine-grained control of the actions each authenticated user can perform in the registry.</p>"},{"location":"articles/authn-authz/#authentication","title":"Authentication","text":""},{"location":"articles/authn-authz/#tls-authentication","title":"TLS authentication","text":"<p>Because authentication credentials are passed over HTTP, it is imperative that TLS be enabled. You can enable and configure TLS authentication in the zot configuration file, as shown in the following example.</p> <pre><code>\"http\": {\n...\n  \"tls\": {\n    \"cert\": \"/etc/zot/certs/server.cert\",\n    \"key\": \"/etc/zot/certs/server.key\"\n  }\n</code></pre> <p>See Mutual TLS authentication for additional information about TLS.</p>"},{"location":"articles/authn-authz/#http-basic-authentication","title":"HTTP basic authentication","text":"<p>When basic HTTP authentication is used, the username and password credentials are joined by a colon (<code>:</code>), base64 encoded, and passed in the HTTP Authorization header.</p>"},{"location":"articles/authn-authz/#http-bearer-authentication","title":"HTTP bearer authentication","text":"<p>To avoid passing the username and password credentials for every HTTP request, a zot client can use bearer token-based authentication. In this method, the client first authenticates with a token server and receives a short-lived token. The client then passes this token in the HTTP Authorization header, specifying <code>Bearer</code> as the authentication scheme.</p> <p>Configure bearer authentication in the zot configuration file as shown in this example.</p> <pre><code>\"http\": {\n...\n  \"auth\": {\n    \"bearer\": {\n      \"realm\": \"https://auth.myreg.io/auth/token\",\n        \"service\": \"myauth\",\n        \"cert\": \"/etc/zot/auth.crt\"\n    }\n  }\n</code></pre> <p>The following table lists the configurable attributes.</p>    Attribute Description     <code>realm</code> A string typically related to the authentication scheme (BASIC and BEARER).   <code>service</code> The name of the authentication service.   <code>cert</code> The path and filename of the server\u2019s SSL/TLS certificate."},{"location":"articles/authn-authz/#mutual-tls-authentication","title":"Mutual TLS authentication","text":"<p>zot supports basic TLS and password-less mutual TLS authentication (mTLS). Specifying a <code>cacert</code> file in the TLS section of the zot configuration file enables mTLS. The <code>cacert</code> parameter is used to validate the client-side TLS certificates.</p> <pre><code>\"http\": {\n...\n  \"tls\": {\n    \"cert\": \"/etc/zot/certs/server.cert\",\n    \"key\": \"/etc/zot/certs/server.key\",\n    \"cacert\": \"/etc/zot/certs/ca.cert\"\n  }\n</code></pre> <p>The following table lists the configurable attributes.</p>    Attribute Description     <code>cert</code> The path and filename of the server\u2019s SSL/TLS certificate.   <code>key</code> The path and filename of the server\u2019s registry key.   <code>cacert</code> The path and filename of the server\u2019s <code>cacerts</code> file, which contains trusted certificate authority (CA) certificates."},{"location":"articles/authn-authz/#preventing-automated-attacks-with-failure-delay","title":"Preventing automated attacks with failure delay","text":"<p>To help prevent automated attacks, you can add a delayed response to an authentication failure. Configure the <code>failDelay</code> attribute in the configuration file as shown in the following example.</p> <pre><code>\"http\": {\n  \"auth\": {\n    \"failDelay\": 5\n  }\n}\n</code></pre> <p>The <code>failDelay</code> attribute specifies a waiting time, in seconds, before zot sends a failure notification to an authenticating user who has been denied access.</p>"},{"location":"articles/authn-authz/#server-side-authentication","title":"Server-side authentication","text":"<p>You can implement server-side authentication for zot using <code>htpasswd</code> or LDAP or both.</p>  <p>  When both <code>htpasswd</code> and LDAP configuration are specified, LDAP authentication is given preference. Because <code>htpasswd</code> authentication is strictly local and requires no remote service, <code>htpasswd</code> serves as a fail-safe authentication mechanism should LDAP become unavailable.</p>"},{"location":"articles/authn-authz/#ldap","title":"LDAP","text":"<p>zot supports integration with an LDAP-based authentication service such as Microsoft Windows Active Directory (AD). Enable and configure LDAP authentication in the zot configuration file, as shown in the following example.</p> <pre><code>\"http\": {\n...\n  \"auth\": {\n    \"ldap\": {\n      \"address\": \"ldap.example.org\",\n      \"port\": 389,\n      \"startTLS\": false,\n      \"baseDN\": \"ou=Users,dc=example,dc=org\",\n      \"userAttribute\": \"uid\",\n      \"bindDN\": \"cn=ldap-searcher,ou=Users,dc=example,dc=org\",\n      \"bindPassword\": \"ldap-searcher-password\",\n      \"skipVerify\": false,\n      \"subtreeSearch\": true\n    }\n  }\n}\n</code></pre> <p>The following table lists the configurable attributes for LDAP authentication.</p>    Attribute Description     <code>address</code> The IP address or hostname of the LDAP server.   <code>port</code> The port number used by the LDAP service.   <code>startTLS</code> Set to <code>true</code> to enable TLS communication with the LDAP server.   <code>baseDN</code> Starting location within the LDAP directory for performing user searches.   <code>userAttribute</code> Attribute name used for a user.   <code>bindDN</code> Base Distinguished Name for the LDAP search.   <code>bindPassword</code> Password of the bind LDAP user.   <code>skipVerify</code> Skip TLS verification.   <code>subtreeSearch</code> Set to <code>true</code> to expand the scope for search to include subtrees of the base DN."},{"location":"articles/authn-authz/#htpasswd","title":"htpasswd","text":"<p>Enable and configure <code>htpasswd</code> authentication in the zot configuration file, as shown in the following example.</p> <ol> <li> <p>Create and store an <code>htpasswd</code> file on the server.</p> <pre><code>$ htpasswd -bBn &lt;username&gt; &lt;password&gt; &gt;&gt; /etc/zot/htpasswd\n</code></pre> </li> <li> <p>Enable <code>htpasswd</code> authentication and configure the path to the     <code>htpasswd</code> authentication in the zot configuration file.</p> <pre><code>\"http\": {\n...\n  \"auth\": {\n      \"htpasswd\": {\n        \"path\": \"/etc/zot/htpasswd\"\n      },\n</code></pre> <p>The <code>path</code> attribute specifies the path and filename of the <code>htpasswd</code> file, which contains user names and hashed passwords.</p> </li> </ol>"},{"location":"articles/authn-authz/#authorization","title":"Authorization","text":"<p>With an access scheme that relies solely on authentication, any authenticated user would be given complete access to the registry. To better control access, zot supports identity-based repository-level access control (authorization) policies. The access control policy is a function of repository, user, and the action being performed on that repository.</p>"},{"location":"articles/authn-authz/#access-control-policies","title":"Access control policies","text":"<p>Four types of access control policies are supported:</p>    Policy type Attribute Access allowed     Default <code>defaultPolicy</code> The default policy specifies what actions are allowed if a user is authenticated but does match any user-specific policy.   User-specific <code>users</code>, <code>actions</code> A user-specific policy specifies access and actions for explicitly named users.   Anonymous <code>anonymousPolicy</code> An anonymous policy specifies what an unauthenticated user is allowed to do. This is an appropriate policy when you want to grant open read-only access to one or more repositories.   Admin <code>adminPolicy</code> The admin policy is a global access control policy that grants privileges to perform actions on any repository.    <p>Access control is organized by repositories, users, and their actions. Most users of a particular repository will have similar access control requirements and can be served by a repository-specific <code>defaultPolicy</code>. Should a user require an exception to the default policy, a user-specific override policy can be configured. With an <code>anonymousPolicy</code>, a repository can additionally allow anonymous actions which do not require user authentication. Finally, one or more users can be designated as administrators, to whom the global administrator policy applies.</p>"},{"location":"articles/authn-authz/#configuring-access-control","title":"Configuring access control","text":"<p>User identity can be used as an authorization criterion for allowing actions on one or more repository paths. For specific users, you can choose to allow any combination of read, create, update, or delete actions on specific paths.</p> <p>When you define policies for specific repository paths, the paths can be specified explicitly or by using <code>glob</code> patterns with simple or recursive wildcards. When a repository path matches more than one path description, authorization is granted based on the policy of the longest (most specific) path matched. For example, if policies are defined for path descriptions <code>**</code> and <code>repos2/repo,</code> the <code>repos2/repo</code> path will match both <code>**</code> and <code>repos2/repo</code> descriptions. In this case, the <code>repos2/repo</code> policy will be applied because it is longer.</p> <p>Note that <code>**</code> effectively defines the default policy, as it matches any path not matched by any other per-repository policy. To override all other policies, you can specify a global admin policy.</p>  <p> Always include the read action in any policy that you define. The create, update, and delete actions cannot be used without the read action.</p>"},{"location":"articles/authn-authz/#example-access-control-configuration","title":"Example: Access control configuration","text":"<p>Use the <code>accessControl</code> attribute in the configuration file to define a set of identity-based authorization policies, as shown in the following example.</p> <pre><code>\"http\": {\n...\n  \"accessControl\": {\n    \"**\": {\n      \"policies\": [{\n        \"users\": [\"charlie\"],\n        \"actions\": [\"read\", \"create\", \"update\"]\n      }],\n      \"defaultPolicy\": [\"read\", \"create\"]\n    },\n    \"tmp/**\": {\n      \"anonymousPolicy\": [\"read\"],\n      \"defaultPolicy\": [\"read\", \"create\", \"update\"]\n    },\n    \"infra/*\": {\n      \"policies\": [{\n          \"users\": [\"alice\", \"bob\"],\n          \"actions\": [\"create\", \"read\", \"update\", \"delete\"]\n        },\n        {\n          \"users\": [\"mallory\"],\n          \"actions\": [\"create\", \"read\"]\n        }\n      ],\n      \"defaultPolicy\": [\"read\"]\n    },\n    \"repos2/repo\": {\n      \"policies\": [{\n          \"users\": [\"bob\"],\n          \"actions\": [\"read\", \"create\"]\n        },\n        {\n          \"users\": [\"mallory\"],\n          \"actions\": [\"create\", \"read\"]\n        }\n      ],\n      \"defaultPolicy\": [\"read\"]\n    },\n    \"adminPolicy\": {\n      \"users\": [\"admin\"],\n      \"actions\": [\"read\", \"create\", \"update\", \"delete\"]\n    }\n  }\n</code></pre> <p>In this example, five policies are defined:</p> <ul> <li> <p>The default policy (<code>**</code>) gives all authenticated users the ability to read or create content, while giving user \"charlie\" the additional ability to update content.</p> </li> <li> <p>The policy for <code>tmp/**</code> matches all repositories under <code>tmp</code> recursively and allows all authenticated users to read, create, or update content in those repositories. Unauthenticated users have read-only access to these repositories.</p> </li> <li> <p>The policy for <code>infra/*</code> matches all repositories directly under <code>infra.</code> Separate policies are defined for specific users, along with a default read-only policy for all other users.</p> </li> <li> <p>The policy for <code>repos2/repo</code> matches only that specific repository.</p> </li> <li> <p>An admin policy (<code>adminPolicy</code>) gives the user \"admin\" global authorization to read, create, update, or delete content in any repository, overriding all other policies.</p> </li> </ul>"},{"location":"articles/benchmarking-with-zb/","title":"Benchmarking zot with zb","text":"<p> The zb tool is useful for benchmarking OCI registry workloads in scenarios such as the following:</p> <ul> <li>comparing configuration changes</li> <li>comparing software versions</li> <li>comparing hardware/deployment environments</li> <li>comparing with other registries</li> </ul>  <p>With the zb tool, you can benchmark a zot registry or any other container image registry that conforms to the OCI Distribution Specification published by the Open Container Initiative (OCI).</p>  <p> We recommend installing and benchmarking with zb when you install zot.</p>"},{"location":"articles/benchmarking-with-zb/#how-to-get-zb","title":"How to get zb","text":"<p>The zb project is hosted with zot on GitHub at project-zot. From GitHub, you can download the zb binary or you can build zb from the source. You can also directly run the released docker image.</p>"},{"location":"articles/benchmarking-with-zb/#supported-platforms-and-architectures","title":"Supported platforms and architectures","text":"<p>zb is supported for the following operating systems and platform architectures:</p>    OS ARCH Platform     linux amd64 Intel-based Linux servers   linux arm64 ARM-based servers and Raspberry Pi4   darwin amd64 Intel-based MacOS   darwin arm64 ARM-based MacOS"},{"location":"articles/benchmarking-with-zb/#downloading-zb-binaries","title":"Downloading zb binaries","text":"<p>Download the executable binary for your server platform and architecture under \"Assets\" on the GitHub zot releases page.</p> <p>The binary image is named using the target platform and architecture from the Supported platforms and architectures table. For example, the binary for an Intel-based MacOS server is <code>zb-darwin-amd64</code>.</p>"},{"location":"articles/benchmarking-with-zb/#building-zb-from-source","title":"Building zb from source","text":"<p>To build the zb binary, copy or clone the zot project from GitHub and execute the <code>make bench</code> command in the <code>zot</code> directory. Use the same command options that you used to build zot, as shown:</p> <p><code>make OS=os ARCH=architecture bench</code></p> <p>For example, the following command builds zb for an Intel-based MacOS server:</p> <p><code>make OS=darwin ARCH=amd64 bench</code></p> <p>In this example, the resulting executable file is <code>zb-darwin-amd64</code> in the <code>zot/bin</code> directory.</p>  <p> A sample Dockerfile for zb is available at Dockerfile-zb.</p>"},{"location":"articles/benchmarking-with-zb/#running-zb","title":"Running zb","text":"<p>The original filename of the executable file will reflect the build options, such as <code>zb-linux-amd64.</code> For convenience, you can rename the executable to simply <code>zb</code>.</p>  <p> The instructions and examples in this guide use <code>zb</code> as the name of the executable file.</p>"},{"location":"articles/benchmarking-with-zb/#usage","title":"Usage","text":"<p>To view the usage and options of <code>zb</code>, run the command with the <code>--help</code> option:</p> <p><code>bin/zb --help</code></p> <p>Command output:</p> <pre><code>    Usage:\n      zb &lt;url&gt; [flags]\n\n    Flags:\n      -A, --auth-creds string \u00a0 \u00a0 \u00a0Use colon-separated BASIC auth creds\n      -c, --concurrency int \u00a0 \u00a0 \u00a0 \u00a0Number of multiple requests to make at a time (default 1)\n \u00a0    -h, --help \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 help for zb\n \u00a0    -o, --output-format string \u00a0 Output format of test results: stdout (default), json, ci-cd\n \u00a0    -r, --repo string \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0Use specified repo on remote registry for test data\n \u00a0    -n, --requests int \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Number of requests to perform (default 1)\n \u00a0    -s, --src-cidr string \u00a0 \u00a0 \u00a0 \u00a0Use specified cidr to obtain ips to make requests from, src-ips and src-cidr are mutually exclusive\n \u00a0    -i, --src-ips string \u00a0 \u00a0 \u00a0 \u00a0 Use colon-separated ips to make requests from, src-ips and src-cidr are mutually exclusive\n \u00a0    -v, --version \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0Show the version and exit\n \u00a0    -d, --working-dir string \u00a0 \u00a0 Use specified directory to store test data\n</code></pre>"},{"location":"articles/benchmarking-with-zb/#example","title":"Example","text":"<p>The following example executes a benchmark operation using zb.</p> <p><code>bin/zb -c 10 -s 127.0.10.0/24 -n 1000 http://localhost:8080</code></p> <p>You can also run the released docker image.</p> <p><code>docker run --net=host -it ghcr.io/project-zot/zb-linux-amd64:latest -c 10 -n 1000 -s 127.0.10.0/24 http://localhost:8080</code></p> <p>Command output:</p> <pre><code>    Registry URL: http://localhost:8080\n\n    Concurrency Level: 2\n    Total requests:    100\n    Working dir:\n\n    ========\n    Test name:            Get Catalog\n    Time taken for tests: 45.397205ms\n    Complete requests:    100\n    Failed requests:      0\n    Requests per second:  2202.7788\n\n    2xx responses: 100\n\n    min: 402.259\u00b5s\n    max: 3.295887ms\n    p50: 855.045\u00b5s\n    p75: 971.709\u00b5s\n    p90: 1.127389ms\n    p99: 3.295887ms\n\n    ========\n    Test name:            Push Monolith 1MB\n    Time taken for tests: 952.336383ms\n    Complete requests:    100\n    Failed requests:      0\n    Requests per second:  105.00491\n\n    2xx responses: 100\n\n    min: 11.125673ms\n    max: 26.375356ms\n    p50: 18.917253ms\n    p75: 21.753441ms\n    p90: 24.02137ms\n    p99: 26.375356ms\n\n    ...\n</code></pre>"},{"location":"articles/building-ci-cd-pipeline/","title":"Building an OCI-native Container Image CI/CD Pipeline","text":"<p> An OCI-native secure container image build/delivery pipeline using the following tools:</p> <ul> <li> <p><code>stacker</code> for building OCI images</p> </li> <li> <p><code>zot</code> as a vendor-neutral OCI image registry server</p> </li> <li> <p><code>skopeo</code> for performing repository interactions</p> </li> <li> <p><code>cosign</code> for container signing and verification</p> </li> <li> <p><code>cri-o</code> for deploying container images</p> </li> <li> <p><code>cosigned</code> for validating container images before deployment</p> </li> </ul>  <p>The Open Container Initiative (OCI) is an open governance structure for the express purpose of creating open industry standards around container formats and runtimes.</p> <p>This document describes a step-by-step procedure towards achieving an OCI-native secure software supply chain using zot in collaboration with other opensource tools. The following diagram shows a portion of the CI/CD pipeline.</p>"},{"location":"articles/building-ci-cd-pipeline/#build-images","title":"Build images","text":"<p><code>stacker</code> is a standalone tool for building OCI images via a declarative <code>yaml</code> format. The output of the build process is a container image in an OCI layout.</p> <p>example: stacker build command</p> <pre><code>stacker build -f &lt;stackerfile.yaml&gt;\n</code></pre>"},{"location":"articles/building-ci-cd-pipeline/#image-registry","title":"Image registry","text":"<p>zot is a production-ready vendor-neutral OCI image registry server purely based on the OCI Distribution Specification. If <code>stacker</code> is used to build the OCI image, it can also be used to publish the built image to an OCI registry.</p> <p>example: stacker publish command</p> <pre><code>stacker publish --url &lt;url&gt; --username &lt;user&gt; --password &lt;password&gt;\n</code></pre> <p>Alternatively, you can use <code>skopeo</code>, a command line utility that performs various operations on container images and image repositories.</p> <p>example: skopeo copies an image to a registry</p> <pre><code>skopeo copy --format=oci oci:&lt;oci-dir&gt;/image:tag \\\n  docker://&lt;zot-server&gt;/image:tag\n</code></pre>  Click here to view an example of pushing and pulling an image using skopeo. <p>  </p>"},{"location":"articles/building-ci-cd-pipeline/#signing-images","title":"Signing images","text":"<p><code>cosign</code> is a tool that performs container signing, verification, and storage in an OCI registry.</p> <p>example: cosign generates keys and signs an image in the registry</p> <pre><code>cosign generate-key-pair\n\ncosign sign --key cosign.key &lt;zot-server&gt;/image:tag\n</code></pre>  Click here to view an example of cosign operations. <p>  </p>"},{"location":"articles/building-ci-cd-pipeline/#deploying-container-images","title":"Deploying container images","text":"<p><code>cri-o</code> is an implementation of the Kubernetes Container Runtime Interface (CRI) to enable using OCI compatible runtimes. It is a lightweight alternative to using Docker as the runtime for Kubernetes.</p>  <p> zot is compatible with kubernetes/cri-o using <code>docker://</code> transport, which is the default.</p>  <p>example: kubelet configuration file</p> <pre><code>apiVersion: v1\nkind: Pod\nmetadata:\n  name: example-pod\nspec:\n  containers:\n  - name: example-container\n    image: &lt;zot-server&gt;/image:tag\n</code></pre>"},{"location":"articles/building-ci-cd-pipeline/#container-image-verification","title":"Container image verification","text":"<p><code>cosigned</code> is an image admission controller that validates container images before deploying them.</p> <p>example: install cosigned using Helm</p> <pre><code>kubectl create namespace cosign-system\n\nkubectl create secret generic mysecret -n \\\n  cosign-system --from-file=cosign.pub=./cosign.pub\n\nhelm repo add sigstore https://sigstore.github.io/helm-charts\n\nhelm repo update\n\nhelm install cosigned -n cosign-system sigstore/cosigned \\\n  --devel --set cosign.secretKeyRef.name=mysecret\n</code></pre>"},{"location":"articles/clustering/","title":"zot Clustering","text":"<p> High availability of the zot registry is supported by the following features:</p> <ul> <li>Stateless zot instances to simplify scale out</li> <li>Bare-metal and Kubernetes deployments</li> </ul>  <p>To ensure high-availability of the registry, zot supports a clustering scheme with stateless zot instances/replicas fronted by a loadbalancer and a shared remote backend storage. This scheme allows the registry service to remain available even if a few replicas fail or become unavailable. Loadbalancing across many zot replicas can also increase aggregate network throughput.</p>  <p>Clustering is supported in both bare-metal and Kubernetes environments.</p>  <p> The remote backend storage must be S3 API-compatible.</p>"},{"location":"articles/clustering/#bare-metal-deployment","title":"Bare-metal deployment","text":""},{"location":"articles/clustering/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>A highly-available loadbalancer such as <code>HAProxy</code> configured to direct traffic to zot replicas.</p> </li> <li> <p>Multiple zot replicas as <code>systemd</code> services hosted on mutiple hosts or VMs.</p> </li> <li> <p>AWS S3 API-compatible remote backend storage.</p> </li> </ul>"},{"location":"articles/clustering/#kubernetes-deployment","title":"Kubernetes deployment","text":""},{"location":"articles/clustering/#prerequisites_1","title":"Prerequisites","text":"<ul> <li> <p>A zot Kubernetes     Deployment     with required number of replicas.</p> </li> <li> <p>AWS S3 API-compatible remote backend storage.</p> </li> <li> <p>A zot Kubernetes     Service.</p> </li> <li> <p>A zot Kubernetes Ingress     Gateway     if the service needs to be exposed outside.</p> </li> </ul>"},{"location":"articles/clustering/#implementing-stateless-zot","title":"Implementing stateless zot","text":"<p>zot maintains two types of durable state:</p> <ul> <li> <p>the actual image data itself</p> </li> <li> <p>the image metadata in the registry\u2019s cache</p> </li> </ul> <p>In a stateless clustering scheme, the image data is stored in the remote storage backend and the registry cache is disabled by turning off both deduplication and garbage collection.</p>"},{"location":"articles/clustering/#ecosystem-tools","title":"Ecosystem tools","text":"<p>The OCI Distribution Specification imposes certain rules about the HTTP URI paths to which various ecosystem tools must conform. Consider these rules when setting the HTTP prefixes during loadbalancing and ingress gateway configuration.</p>"},{"location":"articles/clustering/#examples","title":"Examples","text":"<p>zot supports clustering by using multiple stateless zot replicas with shared S3 storage and an <code>HAProxy</code> (with sticky session) load-balancing traffic to the replicas.</p>"},{"location":"articles/clustering/#yaml-configuration","title":"YAML configuration","text":"Click here to view a sample haproxy configuration. <pre><code>global\n        log /dev/log    local0\n        log /dev/log    local1 notice\n        chroot /var/lib/haproxy\n        maxconn 2000\n        stats socket /run/haproxy/admin.sock mode 660 level admin expose-fd listeners\n        stats timeout 30s\n        user haproxy\n        group haproxy\n        daemon\n\n        # Default SSL material locations\n        ca-base /etc/ssl/certs\n        crt-base /etc/ssl/private\n\n        # See: https://ssl-config.mozilla.org/#server=haproxy&amp;server-version=2.0.3&amp;config=intermediate\n        ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384\n        ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256\n        ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets\n\ndefaults\n        log     global\n        mode    http\n        option  httplog\n        option  dontlognull\n        timeout connect 5000\n        timeout client  50000\n        timeout server  50000\n        errorfile 400 /etc/haproxy/errors/400.http\n        errorfile 403 /etc/haproxy/errors/403.http\n        errorfile 408 /etc/haproxy/errors/408.http\n        errorfile 500 /etc/haproxy/errors/500.http\n        errorfile 502 /etc/haproxy/errors/502.http\n        errorfile 503 /etc/haproxy/errors/503.http\n        errorfile 504 /etc/haproxy/errors/504.http\n\nfrontend zot\n    bind *:8080\n    mode http\n    default_backend zot-cluster\n\nbackend zot-cluster\n    mode http\n    balance roundrobin\n    server zot1 127.0.0.1:8081 check\n    server zot2 127.0.0.1:8082 check\n    server zot3 127.0.0.1:8083 check\n</code></pre>"},{"location":"articles/clustering/#zot-s3-configuration","title":"zot S3 configuration","text":"Click here to view a sample zot configuration for S3. <pre><code>{\n    \"distSpecVersion\": \"1.0.1-dev\",\n    \"storage\": {\n        \"rootDirectory\": \"/tmp/zot\",\n        \"dedupe\": true,\n        \"storageDriver\": {\n            \"name\": \"s3\",\n            \"rootdirectory\": \"/zot\",\n            \"region\": \"us-east-2\",\n            \"bucket\": \"zot-storage\",\n            \"secure\": true,\n            \"skipverify\": false\n        },\n        \"cacheDriver\": {\n            \"name\": \"dynamodb\",\n            \"endpoint\": \"http://localhost:4566\",\n            \"region\": \"us-east-2\",\n            \"tableName\": \"MainTable\"\n        }\n    },\n    \"http\": {\n        \"address\": \"127.0.0.1\",\n        \"port\": \"8080\"\n    },\n    \"log\": {\n        \"level\": \"debug\"\n    }\n}\n</code></pre>"},{"location":"articles/mirroring/","title":"OCI Registry Mirroring With zot","text":"<p> A <code>zot</code> registry can mirror one or more upstream OCI registries, including popular cloud registries such as Docker Hub and Google Container Registry (gcr.io). </p>  <p>A key use case for zot is to act as a mirror for upstream registries. If an upstream registry is OCI distribution-spec conformant for pulling images, you can use zot's <code>sync</code> feature to implement a downstream mirror, synchronizing OCI images and corresponding artifacts.</p> <p>As with git, wherein every clone is a full repository, you can configure a local zot instance to be a full OCI mirror registry. This allows for a fully distributed disconnected container image build pipeline.</p> <p>Synchronization between upstream and downstream registries can be implemented by periodic polling of the upstream registry or synchronization can occur on demand, when a user pulls an image from the downstream registry.</p>  <p>  Because Docker Hub rate-limits pulls and does not support catalog listing, do not use polled mirroring with Docker Hub. Use only on-demand mirroring with Docker Hub.</p>"},{"location":"articles/mirroring/#basic-configuration-for-mirroring-with-sync","title":"Basic configuration for mirroring with sync","text":"<p>The <code>sync</code> feature of zot is an extension of the OCI-compliant registry implementation. You can configure the <code>sync</code> feature under the <code>extensions</code> section of the zot configuration file, as shown in this example:</p> <pre><code>  \"extensions\": {\n    \"sync\": {\n      \"credentialsFile\": \"./examples/sync-auth-filepath.json\",\n      \"registries\": [\n        {\n          \"urls\": [\n            \"https://registry1:5000\"\n          ],\n          \"onDemand\": false,\n          \"pollInterval\": \"6h\",\n          \"tlsVerify\": true,\n          \"certDir\": \"/home/user/certs\",\n          \"maxRetries\": 3,\n          \"retryDelay\": \"5m\", \n          \"onlySigned\": true,\n          \"content\": [\n            {\n              \"prefix\": \"/repo2/repo\",\n              \"tags\": {\n                \"regex\": \"4.*\",\n                \"semver\": true\n              }\n              \"destination\": \"/repo2\",\n              \"stripPrefix\": true\n            }\n          ]\n        }\n      ]\n    }\n  }\n</code></pre> <p>The following table lists the configurable attributes for the <code>sync</code> feature:</p>        Attribute Description     <p>credentialsFile</p> <p>The location of a local file containing credentials for other registries, as in the following example: <pre>{\u2003\u2003\"127.0.0.1:8080\": {\u2003\u2003\u2003\u2003\"username\": \"user\",\u2003\u2003\u2003\u2003\"password\": \"pass\"\u2003\u2003},\u2003\u2003\u2003\u2003\"registry2:5000\": {\u2003\u2003\u2003\u2003\"username\": \"user2\",\u2003\u2003\u2003\u2003\"password\": \"pass2\"\u2003\u2003}}</pre></p>   <p>urls</p> <p>A list of one or more URLs to an upstream image registry. If the main URL fails, the sync process will try the next URLs in the listed order.</p>   <p>onDemand</p> <ul> <li><p><code>false</code>: Pull all images not found in the local registry.</p></li> <li><p><code>true</code>: Pull any image not found in the local registry only when needed.</p></li> </ul>   <p>pollInterval</p> <p>The period in seconds between polling of remote registries. If no value is specified, no periodic polling will occur. If a value is set and the content attributes are configured, periodic synchronization is enabled and will run at the specified value.Note: Because Docker Hub rate-limits pulls and does not support catalog listing, do not use polled mirroring with Docker Hub. Use only onDemand mirroring with Docker Hub.</p>   <p>tlsVerify</p> <ul> <li><p><code>false</code>: TLS will not be verified.</p></li> <li><p><code>true</code>: (Default) The TLS connection to the destination registry will be verified.</p></li> </ul>   <p>certDir</p> <p>If a path is specified, use certificates (*.crt, *.cert, *.key files) at this path when connecting to the destination registry or daemon. If no path is specified, use the default certificates directory.</p>   <p>maxRetries</p> <p>The maximum number of retries if an error occurs during either an on-demand or periodic synchronization. If no value is specified, no retries will occur.</p>   <p>retryDelay</p> <p>The interval in seconds between retries. This attribute is mandatory when maxRetries is configured.</p>   <p>onlySigned</p> <ul> <li><p><code>false</code>: Synchronize signed or unsigned images.</p></li> <li><p><code>true</code>: Synchronize only signed images (either notary or cosign).</p></li> </ul>   <p>content</p> <p>The included attributes in this section specify which content will be pulled. If this section is not populated, periodic polling will not occur. The included attributes can also filter which on-demand images are pulled.</p>   <p> prefix</p> <p>On the remote registry, the path from which images will be pulled. This path can be a string that exactly matches the remote path, or it can be a glob pattern. For example, the path can include a wildcard (*) or a recursive wildcard (**).</p>   <p> tags</p> <p>The included attributes in this optional section specify how remote images will be selected for synchronization based on image tags.</p>   <p> tags.regex</p> <p>Specifies a regular expression for matching image tags. Images whose tags do not match the expression are not pulled.</p>   <p> tags.semver</p> <p>Specifies whether image tags are to be filtered by semantic versioning (semver) compliance.</p> <ul> <li><p><code>false</code>: Do not filter by semantic versioning.</p></li> <li><p><code>true</code>: Filter by semantic versioning.</p></li> </ul>   <p> destination</p> <p>Specifies the local path in which pulled images are to be stored.</p>   <p> stripPrefix</p> <p>Specifies whether the prefix path from the remote registry will be retained or replaced when the image is stored in the zot registry.</p> <ul> <li><p><code>false</code>: Retain the source prefix, append it to the destination path.</p></li> <li><p><code>true</code>: Remove the source prefix.</p>  <p>Note: If the source prefix was specified with meta-characters (such as **), only the prefix segments that precede the meta-characters are removed. Any remaining path segments are appended to the destination path.</p> </li> </ul>"},{"location":"articles/mirroring/#example-multiple-repositories-with-polled-mirroring","title":"Example: Multiple repositories with polled mirroring","text":"<p>The following is an example of sync configuration for mirroring multiple repositories with polled mirroring.</p> <pre><code>\"sync\": {\n  \"enable\": true,\n  \"credentialsFile\": \"./examples/sync-auth-filepath.json\",\n  \"registries\": [\n    {\n      \"urls\": [\"https://registry1:5000\"],\n      \"onDemand\": false,\n      \"pollInterval\": \"6h\",\n      \"tlsVerify\": true,\n      \"certDir\": \"/home/user/certs\",\n      \"maxRetries\": 3,\n      \"retryDelay\": \"5m\",\n      \"onlySigned\": true,\n      \"content\": [\n        {\n          \"prefix\": \"/repo1/repo\",\n          \"tags\": {\n            \"regex\": \"4.*\",\n            \"semver\": true\n          }\n        },\n        {\n          \"prefix\": \"/repo2/repo\",\n          \"destination\": \"/repo2\",\n          \"stripPrefix\": true\n        },\n        {\n          \"prefix\": \"/repo3/repo\"\n        }\n      ]\n    }\n  }\n</code></pre> <p>The configuration in this example will result in the following behavior:</p> <ul> <li>Only signed images (notation and cosign) are synchronized.  </li> <li>The sync communication is secured using certificates in <code>certDir</code>.</li> <li>This registry synchronizes with upstream registry every 6 hours. </li> <li>On-demand mirroring is disabled.</li> <li>Based on the content filtering options, this registry synchronizes these images:<ul> <li>From /repo1/repo, images with tags that begin with \"4.\" and are semver compliant. Files are stored locally in /repo1/repo on localhost.</li> <li>From /repo2/repo, images with all tags. Because <code>stripPrefix</code> is enabled, files are stored locally in /repo2. For example, docker://upstream/repo2/repo:v1 is stored as docker://local/repo2:v1.</li> <li>From /repo3/repo, images with all tags. Files are stored locally in /repo3/repo.</li> </ul> </li> </ul>"},{"location":"articles/mirroring/#example-multiple-registries-with-on-demand-mirroring","title":"Example: Multiple registries with on-demand mirroring","text":"<p>The following is an example of sync configuration for mirroring multiple registries with on-demand mirroring.</p> <pre><code>{\n  \"distSpecVersion\": \"1.0.1\",\n  \"storage\": {\n    \"rootDirectory\": \"/tmp/zot\",\n    \"gc\": true\n  },\n  \"http\": {\n    \"address\": \"0.0.0.0\",\n    \"port\": \"8080\"\n  },\n  \"log\": {\n    \"level\": \"debug\"\n  },\n  \"extensions\": {\n    \"sync\": {\n      \"enable\": true,\n      \"registries\": [\n        {\n          \"urls\": [\"https://k8s.gcr.io\"],\n          \"content\": [\n            {\n              \"prefix\": \"**\", \n              \"destination\": \"/k8s-images\"\n            }\n          ],\n          \"onDemand\": true,\n          \"tlsVerify\": true\n        },\n        {\n          \"urls\": [\"https://docker.io/library\"],\n          \"content\": [\n            {\n              \"prefix\": \"**\", \n              \"destination\": \"/docker-images\"\n            }\n          ],\n          \"onDemand\": true,\n          \"tlsVerify\": true\n        }\n      ]\n    }\n  }\n}\n</code></pre> <p>With this zot configuration, the sync behavior is as follows:</p> <ol> <li> <p>This user request for content from the zot registry: <code>skopeo copy --src-tls-verify=false docker://localhost:8080/docker-images/alpine &lt;dest&gt;</code>causes zot to synchronize the content with the docker.io registry: <code>docker.io/library/alpine:latest</code>to the zot registry: <code>localhost:8080/docker-images/alpine:latest</code>before delivering the content to the requestor at <code>&lt;dest&gt;</code>.</p> </li> <li> <p>This user request for content from the zot registry: <code>skopeo copy --src-tls-verify=false docker://localhost:8080/k8s-images/kube-proxy:v1.19.2 &lt;dest&gt;</code>causes zot to synchronize the content with the gcr.io registry: <code>k8s.gcr.io/kube-proxy:v1.19.2</code> to the zot registry: <code>localhost:8080/k8s-images/kube-proxy:v1.19.2</code>before delivering the content to the requestor at <code>&lt;dest&gt;</code>.</p> </li> </ol> <p>You can use this command: <code>curl http://localhost:8080/v2/_catalog</code>to display the local repositories: <pre><code>  {\n    \"repositories\":[\n      \"docker-images/alpine\",\n      \"k8s-images/kube-proxy\"\n    ]\n  }\n</code></pre></p>"},{"location":"articles/mirroring/#example-multiple-registries-with-mixed-mirroring-modes","title":"Example: Multiple registries with mixed mirroring modes","text":"<p>The following is an example of a zot configuration file for mirroring multiple upstream registries.</p> <pre><code>{\n  \"distSpecVersion\": \"1.1.0-dev\",\n  \"storage\": {\n    \"rootDirectory\": \"/tmp/zot\"\n  },\n  \"http\": {\n    \"address\": \"127.0.0.1\",\n    \"port\": \"8080\"\n  },\n  \"log\": {\n    \"level\": \"debug\"\n  },\n  \"extensions\": {\n    \"sync\": {\n      \"enable\": true,\n      \"credentialsFile\": \"./examples/sync-auth-filepath.json\",\n      \"registries\": [\n        {\n          \"urls\": [\n            \"https://registry1:5000\"\n          ],\n          \"onDemand\": false,\n          \"pollInterval\": \"6h\",\n          \"tlsVerify\": true,\n          \"certDir\": \"/home/user/certs\",\n          \"maxRetries\": 3,\n          \"retryDelay\": \"5m\",\n          \"onlySigned\": true,\n          \"content\": [\n            {\n              \"prefix\": \"/repo1/repo\",\n              \"tags\": {\n                \"regex\": \"4.*\",\n                \"semver\": true\n              }\n            },\n            {\n              \"prefix\": \"/repo1/repo\",\n              \"destination\": \"/repo\",\n              \"stripPrefix\": true\n            },\n            {\n              \"prefix\": \"/repo2/repo\"\n            }\n          ]\n        },\n        {\n          \"urls\": [\n            \"https://registry2:5000\",\n            \"https://registry3:5000\"\n          ],\n          \"pollInterval\": \"12h\",\n          \"tlsVerify\": false,\n          \"onDemand\": false,\n          \"content\": [\n            {\n              \"prefix\": \"/repo2\",\n              \"tags\": {\n                \"semver\": true\n              }\n            }\n          ]\n        },\n        {\n          \"urls\": [\n            \"https://docker.io/library\"\n          ],\n          \"onDemand\": true,\n          \"tlsVerify\": true,\n          \"maxRetries\": 6,\n          \"retryDelay\": \"5m\"\n        }\n      ]\n    }\n  }\n}\n</code></pre>"},{"location":"articles/mirroring/#example-support-for-subpaths-in-local-storage","title":"Example: Support for subpaths in local storage","text":"<p><pre><code>{\n  \"distSpecVersion\": \"1.0.1\",\n  \"storage\": {\n    \"subPaths\":{\n      \"/kube-proxy\":{\n        \"rootDirectory\": \"/tmp/kube-proxy\",\n        \"dedupe\": true,\n        \"gc\": true\n       }\n     },\n    \"rootDirectory\": \"/tmp/zot\",\n    \"gc\": true\n  },\n  \"http\": {\n    \"address\": \"0.0.0.0\",\n    \"port\": \"8080\"\n  },\n  \"log\": {\n    \"level\": \"debug\"\n  },\n  \"extensions\": {\n    \"sync\": {\n      \"enable\": true,\n      \"registries\": [\n        {\n          \"urls\": [\"https://k8s.gcr.io\"],\n          \"content\": [\n            {\n              \"destination\": \"/kube-proxy\", \n              \"prefix\": \"**\"\n            }\n          ],\n          \"onDemand\": true,\n          \"tlsVerify\": true,\n          \"maxRetries\": 2,\n          \"retryDelay\": \"5m\"\n        }\n      ]\n    }\n  }\n}\n</code></pre> With this zot configuration, the sync behavior is as follows:</p> <ul> <li>This user request for content from the zot registry: <code>skopeo copy --src-tls-verify=false docker://localhost:8080/kube-proxy/kube-proxy:v1.19.2 &lt;dest&gt;</code>causes zot to synchronize the content with this remote registry: <code>k8s.gcr.io/kube-proxy:v1.19.2</code>to the zot registry: <code>localhost:8080/kube-proxy/kube-proxy:v1.19.2</code>before delivering the content to the requestor at <code>&lt;dest&gt;</code>.</li> </ul> <p>You can use this command: <code>curl http://localhost:8080/v2/_catalog</code>to display the local repositories: <pre><code>  {\n    \"repositories\":[\n      \"docker-images/alpine\",\n      \"k8s-images/kube-proxy\",\n      \"kube-proxy/kube-proxy\"\n    ]\n  }\n</code></pre></p> <p>In zot storage, the requested content is located here: <code>/tmp/zot/kube-proxy/kube-proxy/kube-proxy/</code>This subpath is created from the following path components:</p> <ul> <li><code>/tmp/zot</code> is the <code>rootDirectory</code> of the zot registry</li> <li><code>kube-proxy</code> is the <code>rootDirectory</code> of the storage subpath</li> <li><code>kube-proxy</code> is the sync <code>destination</code> parameter</li> <li><code>kube-proxy</code> is the repository name</li> </ul>"},{"location":"articles/monitoring/","title":"Monitoring the registry","text":"<p> zot supports a range of monitoring tools including logging, metrics, and benchmarking.</p>  <p>The following sections describe how to configure logging and monitoring with zot. You can use zot's benchmarking tool to test your configuration and deployment, as described in Benchmarking zot with zb.</p>"},{"location":"articles/monitoring/#logging","title":"Logging","text":"<p>Logging for zot operations is configured with the <code>log</code> attribute in the configuration file, as shown in the following example.</p> <pre><code>\"log\":{\n  \"level\":\"debug\",\n  \"output\":\"/tmp/zot.log\",\n  \"audit\": \"/tmp/zot-audit.log\"\n}\n</code></pre> <p>The following table lists the configurable attributes.</p>        Attribute Description     <p><code>level</code></p> <p>The minimum level for logged events. The levels are: <code>panic,</code> <code>fatal,</code> <code>error,</code> <code>warn,</code> <code>info,</code> <code>debug,</code> and <code>trace.</code></p>   <p><code>output</code></p> <p>The filesystem path for the log output file. The default is <code>stdout</code>.</p>   <p><code>audit</code></p> <p>(Optional) If a filesystem path is specified for audit logging, an audit log is enabled and will be stored at the specified path.</p>"},{"location":"articles/monitoring/#metrics","title":"Metrics","text":"<p>The available methods for collecting metrics varies depending on whether your zot installation is a minimal (distribution-spec-only) image or a full image including extensions.</p>"},{"location":"articles/monitoring/#enabling-metrics-for-a-full-zot-image-with-extensions","title":"Enabling metrics for a full zot image with extensions","text":"<p>Add the <code>metrics</code> attribute under <code>extensions</code> in the configuration file to enable and configure metrics, as shown in the following example.</p> <pre><code>\"extensions\": {\n    \"metrics\": {\n        \"enable\": true,\n        \"prometheus\": {\n            \"path\": \"/metrics\"\n        }\n    }\n}\n</code></pre> <p>The following table lists the configurable attributes for metrics collection.</p>    Attribute Description     <code>enable</code> If this attribute is missing, metrics collection is enabled by default. Metrics collection can be disabled by setting this attribute to <code>false</code>.   <code>prometheus</code> Attributes under <code>prometheus</code> contain configuration settings for the Prometheus node exporter.   <code>path</code> The server path on which metrics will be exposed."},{"location":"articles/monitoring/#collecting-metrics-from-a-minimal-zot-image-using-a-node-exporter","title":"Collecting metrics from a minimal zot image using a node exporter","text":"<p>Although a minimal zot image does not contain a node exporter, it exposes internal metrics in a Prometheus format for collection by a separate node exporter tool such as zxp. The zot companion binary <code>zxp</code> is a node exporter that can be deployed with a minimal zot image in order to scrape metrics from the zot server.</p> <p>Metrics are automatically enabled in the zot server upon first scrape from the node exporter and the metrics are automatically disabled when the node exporter has not performed any scraping for some period. No extra zot configuration is needed for this behavior.</p> <p>You can download the zxp executable binary for your server platform and architecture under \"Assets\" on the GitHub zot releases page.</p> <p>The binary image is named using the target platform and architecture. For example, the binary for an Intel-based MacOS server is <code>zxp-darwin-amd64</code>. To configure the zxp example image, run this command:</p> <p><code>zxp-darwin-amd64 config zxp-config-file</code></p>  <p> For convenience, you can rename the binary image file to simply <code>zxp.</code></p> <p> A sample Dockerfile for zxp is available at Dockerfile-zxp.</p>  <p>The configuration file of zxp contains connection details for the zot server from which it will scrape metrics. The following JSON structure is an example of the <code>zxp-config-file</code> contents:</p> <pre><code>{\n    \"Server\": {\n        \"protocol\": \"http\",\n        \"host\": \"127.0.0.1\",\n        \"port\": \"8080\"\n    },\n    \"Exporter\": {\n        \"port\": \"8081\",\n        \"log\": {\n            \"level\": \"debug\"\n        }\n    }\n}\n</code></pre>  <p> The zxp module does not have Prometheus integration.</p> <p>The zxp module is not needed with a full zot image.</p>"},{"location":"articles/security-posture/","title":"zot Security Posture","text":"<p> An overview of zot build-time and runtime security hardening features, including:</p> <ul> <li>Build-time hardening such as PIE-mode builds</li> <li>Minimal-build option for smaller attack surface</li> <li>Open Source Security Foundation best practices for CI/CD</li> <li>Non-root deployment</li> <li>Robust authentication/authorization options</li> </ul>  <p>The zot project takes a defense-in-depth approach to security, applying industry-standard best practices at various stages. Recognizing that security hardening and product features are sometimes in conflict with each other, we also provide flexibility both at build and deployment time.</p>"},{"location":"articles/security-posture/#build-time-hardening","title":"Build-time hardening","text":"<p>The following are the steps taken during build-time.</p>"},{"location":"articles/security-posture/#pie-build-mode","title":"PIE build-mode","text":"<p>The zot binary is built with PIE build-mode enabled to take advantage of ASLR support in modern operating systems such as Linux ASLR. While zot is intended to be a long-running service (without frequent restarts), it prevents attackers from developing a generic attack that depends on predictable memory addresses across multiple zot deployments.</p>"},{"location":"articles/security-posture/#conditional-builds","title":"Conditional builds","text":"<p>Functionality in zot is broadly organized as a core Distribution Specification implementation and additional features as extensions. The rationale behind this approach is to minimize or control library dependencies that get included in the binary and consequently the attack surface.</p> <p>We currently build and release two image flavors:</p> <ul> <li> <p>minimal, which is a minimal Distribution Specification     conformant registry, and</p> </li> <li> <p>full, which incorporates the minimal build and all     extensions</p> </li> </ul> <p>The minimal flavor is for the security-minded and minimizes the number of dependencies and libraries. The full flavor is for the functionality-minded with the caveat that the attack surface of the binary is potentially broader. However by no means are these the only options. Our build (via the <code>Makefile</code>) provides the flexibility to pick and choose extensions in order to build a binary between minimal and full. For example,</p> <p><code>make EXTENSIONS=search binary</code></p> <p>produces a zot binary with only the search feature enabled.</p>"},{"location":"articles/security-posture/#cicd-pipeline","title":"CI/CD pipeline","text":"<p>zot CI/CD process attempts to align with the Open Source Security Foundation (OSSF) best practices guidelines to achieve high code quality.</p>"},{"location":"articles/security-posture/#code-reviews","title":"Code reviews","text":"<p>zot is an open source project and all code submissions are open and transparent. Every pull request (PR) submitted to the project repository must be reviewed by the code owners. We have additional CI/CD workflows monitoring for unreviewed commits.</p>"},{"location":"articles/security-posture/#cicd-checks","title":"CI/CD checks","text":"<p>All PRs must pass the full CI/CD pipeline checks including unit, functional, and integration tests, code quality and style checks, and performance regressions. In addition, all binaries produced are subjected to further security scans to detect any known vulnerabilities.</p>"},{"location":"articles/security-posture/#runtime-hardening","title":"Runtime hardening","text":"<p>The following steps can be taken to harden a zot deployment.</p>"},{"location":"articles/security-posture/#unprivileged-runtime-process","title":"Unprivileged runtime process","text":"<p>Running zot doesn\u2019t require root privileges. In fact, the recommended approach is to create a separate user/group ID for the zot process.</p>"},{"location":"articles/security-posture/#authentication","title":"Authentication","text":"<p>All interactions with zot are over HTTP APIs, and <code>htpasswd</code>-based local authentication, LDAP, mutual TLS, and token-based authentication mechanisms are supported. We strongly recommend enabling a suitable mechanism for your deployment use case in order to prevent unauthorized access. See the provided authentication examples.</p>"},{"location":"articles/security-posture/#access-control","title":"Access control","text":"<p>Following authentication, it is further possible to allow or deny actions by a user on a particular repository stored on the zot registry. See the provided access control examples.</p>"},{"location":"articles/security-posture/#vulnerability-scans","title":"Vulnerability scans","text":"<p>Apart from hardening the deployment itself, zot also supports security scanning of stored container images.</p>"},{"location":"articles/security-posture/#reporting-security-issues","title":"Reporting security issues","text":"<p>We understand that no software is perfect and in spite of our best efforts, security bugs may be found. Refer to our security policy for taking a responsible course of action when reporting security bugs.</p>"},{"location":"articles/storage/","title":"Storage Planning with zot","text":"<p> zot supports the following features to provide OCI standards-based, vendor-agnostic image storage:</p> <ul> <li>Local and remote file storage</li> <li>Inline deduplication and garbage collection</li> <li>Data scrubbing in background</li> </ul>"},{"location":"articles/storage/#storage-model","title":"Storage model","text":"<p>Data handling in zot revolves around two main principles: that data and APIs on the wire conform to the OCI Distribution Specification and that data on the disk conforms to the OCI Image Layout Specification. As a result, any client that is compliant with the Distribution Specification can read from or write to a zot registry. Furthermore, the actual storage is simply an OCI Image Layout. With only these two specification documents in hand, the entire data flow inside can be easily understood.</p>  <p> zot does not implement, support, or require any vendor-specific protocols, including that of Docker.</p>"},{"location":"articles/storage/#hosting-an-oci-image-layout","title":"Hosting an OCI image layout","text":"<p>Because zot supports the OCI image layout, it can readily host and serve any directories holding a valid OCI image layout even when those directories have been created elsewhere. This property of zot is suitable for use cases in which container images are independently built, stored, and transferred, but later need to be served over the network.</p>"},{"location":"articles/storage/#storage-backends","title":"Storage backends","text":"<p>The following types of storage backends are supported.</p>"},{"location":"articles/storage/#local-filesystem","title":"Local filesystem","text":"<p>zot can store and serve files from one or more local directories (folders). A minimum of one root directory is required for local hosting, but additional hosted directories can be added. When accessed by HTTP APIs, all directories can appear as a single data store.</p>  <p> Remote filesystems that are mounted and accessible locally such as <code>NFS</code> or <code>fuse</code> are treated as local filesystems.</p>"},{"location":"articles/storage/#remote-filesystem","title":"Remote filesystem","text":"<p>zot can also store data remotely in the cloud, using the storage APIs of the cloud service. Currently, zot supports only the AWS S3 storage service.</p>"},{"location":"articles/storage/#example-zot-s3-configuration","title":"Example: zot S3 configuration","text":"Click here to view a sample zot configuration for S3. <pre><code>{\n    \"distSpecVersion\": \"1.0.1-dev\",\n    \"storage\": {\n        \"rootDirectory\": \"/tmp/zot\",\n        \"dedupe\": true,\n        \"storageDriver\": {\n            \"name\": \"s3\",\n            \"rootdirectory\": \"/zot\",\n            \"region\": \"us-east-2\",\n            \"bucket\": \"zot-storage\",\n            \"secure\": true,\n            \"skipverify\": false\n        },\n        \"cacheDriver\": {\n            \"name\": \"dynamodb\",\n            \"endpoint\": \"http://localhost:4566\",\n            \"region\": \"us-east-2\",\n            \"tableName\": \"MainTable\"\n        },\n    },\n    \"http\": {\n        \"address\": \"127.0.0.1\",\n        \"port\": \"8080\"\n    },\n    \"log\": {\n        \"level\": \"debug\"\n    }\n}\n</code></pre>"},{"location":"articles/storage/#storage-configuration","title":"Storage configuration","text":"<p>Exposing flexibility in storage capabilities is a key tenet for catering to the requirements of varied environments ranging from cloud to on-premises to IoT.</p>"},{"location":"articles/storage/#commit","title":"Commit","text":"<p>Most modern filesystems buffer and flush RAM data to disk after a delay. The purpose of this function is to improve performance at the cost of higher disk memory usage. In embedded devices such as Raspberry Pi, for example, where RAM may be very limited and at a premium, it is desirable to flush data to disk more frequently. The zot storage configuration exposes an option called <code>commit</code> which, when enabled, causes data writes to be committed to disk immediately. This option is disabled by default.</p>"},{"location":"articles/storage/#deduplication","title":"Deduplication","text":"<p>Deduplication is a storage space saving feature wherein only a single copy of specific content is maintained on disk while many different image manifests may hold references to that same content. The deduplication feature is also available for supported cloud storage backends.</p>"},{"location":"articles/storage/#garbage-collection","title":"Garbage collection","text":"<p>After an image is deleted by deleting an image manifest, the corresponding blobs can be purged to free up space. However, since Distribution Specification APIs are not transactional between blob and manifest lifecycle, care must be taken so as not to put the storage in an inconsistent state. Garbage collection in zot is an inline feature meaning that it is not necessary to take the registry offline. The zot configuration model allows for enabling and disabling garbage collection. The model also allows the configuration of a tunable delay, which can be set depending on client network speeds and the size of blobs.</p>"},{"location":"articles/storage/#scrub","title":"Scrub","text":"<p>The scrub function, available as an extension, makes it possible to ascertain data validity by computing hashes on blobs periodically and continuously so that any bit rot is caught and reported early.</p>"},{"location":"developer-guide/contributing/","title":"Contributing to zot Development","text":"<p> The zot project is built for developers by developers. The zot project welcones the participation of the open source community in extending and improving zot. </p>"},{"location":"developer-guide/contributing/#submission-requirements","title":"Submission Requirements","text":"<p>Summary: All contributions must meet these requirements:</p> <ul> <li>Adhere to the Apache license</li> <li>Be submitted by a pull request (PR) from your fork</li> <li>Commits must have a  </li> </ul>"},{"location":"developer-guide/contributing/#license","title":"License","text":"<p>zot is released under the Apache License 2.0. All contributions must adhere to this license and must explicitly state adherence.</p>"},{"location":"developer-guide/contributing/#submitting-a-pull-request-pr","title":"Submitting a Pull Request (PR)","text":"<p>First, fork the zot project on GitHub and submit a commit to your fork. Then open a new pull request (PR) to the zot project. All pull requests must meet these requirements:</p> <ul> <li>License statement</li> </ul> <p>Either the commit messsage or the PR description must contain the following statement:</p> <p>\"By submitting this pull request, I confirm that my contribution is made under the terms of the Apache 2.0 license.\"</p> <ul> <li>Developer Certificate of Origin (DCO) and sign-off</li> </ul> <p>All commits require a Developer Certificate of Origin via the \"Signed-off-by:\" commit message and commit signatures using GPG keys. Include the <code>-s</code> flag in your <code>git commit</code> command.</p> <ul> <li>Commit message format</li> </ul> <p>The commit message must follow the Convention Commits format. The message must begin with a keyword that categorizes the commit, followed by a colon. Validation of a commit message is determined by this expression:</p> <p><code>\"^((build|chore|ci|docs|feat|fix|perf|refactor|revert|style|test)(\\(.+\\))?(!)?(: (.*\\s*)*))\"</code></p> <p>An example of a valid commit message is \"docs: Fixes a typo in module.md.\"</p> <p>In addition, any new PR requires a brief form to be completed by the submitter with details about the PR. Appropriate code owners are automatically identified and will be notified of the new PR.</p>"},{"location":"developer-guide/contributing/#cicd-checks","title":"CI/CD Checks","text":"<p>We take code quality very seriously. All PRs must pass various CI/CD checks that enforce code quality such as code coverage, security scanning, performance regressions, distribution spec conformance, ecosystem client tool compatibility, etc.</p>"},{"location":"developer-guide/contributing/#reporting-issues","title":"Reporting Issues","text":"<p>Issues are broadly classified as functional bugs and security issues. The latter is treated a little differently due to the sensitive nature.</p>"},{"location":"developer-guide/contributing/#filing-a-functional-issue","title":"Filing a Functional Issue","text":"<p>No software is perfect, and we expect users to find issues with the zot code base. First, check whether your issue has already been filed by someone else by performing  an issue search. If the issue is not found, file a new issue by clicking the New issue button on the zot/issues page and answering the questions. The more information that you can provide, the easier it becomes to triage the issue.</p>"},{"location":"developer-guide/contributing/#filing-a-security-issue","title":"Filing a Security Issue","text":"<p>Security issues are best filed by sending an email to <code>security@zotregistry.io.</code> After 45 days, we will make the issue public and give credit to the original filer of the issue.</p>"},{"location":"developer-guide/contributing/#code-of-conduct","title":"Code of Conduct","text":"<p>The zot project follows the CNCF Code of Conduct.</p>"},{"location":"developer-guide/contributing/#reporting-conduct-incidents","title":"Reporting Conduct Incidents","text":"<p>To report a conduct-related incident occurring on the zot project, contact the zot project conduct committee by sending an email to <code>conduct@zotregistry.io.</code> You can expect a response within three business days.</p>"},{"location":"developer-guide/extensions-dev/","title":"Developing New Extensions","text":"<p> You can add new functionality to the zot registry by developing extensions for integration into zot.</p>  <p>The OCI Distribution Specification supports extending the functionality of an OCI-compliant registry implementation by adding extensions. Extensions are new APIs developed outside of the core OCI specs. Developers may propose their extensions to the OCI for possible future addition to the Distribution Specification.</p> <p> When planning the development of a new extension, be sure to familiarize yourself with the OCI documentation and guidelines for extensions.</p>"},{"location":"developer-guide/extensions-dev/#current-extensions","title":"Current extensions","text":"<p>The following extensions are currently available in the zot project: </p> <ul> <li>metrics</li> <li>sync</li> <li>search</li> <li>scrub</li> <li>lint</li> </ul> <p>You can examine the implementation of these extensions in the zot project extensions section. The operation and configuration of the current extensions is described in Configuring zot.</p>"},{"location":"developer-guide/extensions-dev/#guidelines-for-developing-new-extensions","title":"Guidelines for developing new extensions","text":"<ul> <li>Each file to be included in the binary for only a specific extension must contain the following syntax at the beginning of the file. For example, a file to be included in the build for extension foo must begin with the following lines:</li> </ul> <pre><code>  //go:build foo\n  // +build foo\n\n  package foo\n\n  ...\n</code></pre> <pre><code>- The first line (`//go:build foo`) is added automatically by the linter if not already present.\n\n- The second line and the third (blank) line are mandatory.\n</code></pre> <ul> <li> <p>For each file that contains functions specific to the extension, create a corresponding \"no-op\" file that contains exactly the same function names. In this file:</p> <ul> <li>Each function is a \"no-op,\" performing no action other than to return a \"success\" value if expected.</li> <li>We recommend naming this \"no-op\" file by appending <code>-disabled</code> to the name of the original file. For example, if the extension is implemented by <code>extension-foo.go</code>, the corresponding \"no-op\" file could be named <code>extension-foo-disabled.go</code>.</li> <li>The first two lines declare an \"anti-tag\" (for example, <code>!foo</code>). In the foo extension example, the \"no-op\" file will be included in binaries that don't implement the foo extension, but won't be included in binaries that implement the foo extension.  The foo example \"no-op\" file begins with the following lines:</li> </ul> </li> </ul> <p><pre><code>  //go:build !foo\n  // +build !foo\n\n  package foo\n\n  ...\n</code></pre>     See extension-lint-disabled.go in the zot project for an example of a \"no-op\" file.</p> <ul> <li> <p>When developing a new extension, you should create a blackbox test in which a binary containing the new extension can be tested in a usage scenario. See the test/blackbox folder in the zot project for examples of extension tests.</p> <ul> <li>Create targets in <code>Makefile</code> for newly added blackbox tests. You should also add them as GitHub Workflows in .github/workflows/ecosystem-tools.yaml in the zot project.</li> </ul> </li> <li> <p>When configuring multiple extensions in the <code>extensions</code> section of the zot configuration file, list new extensions after the current extensions in the recommended order, such as:</p> <p>metrics, sync, search, scrub, lint, new_extension_1, new_extension_2, ...</p> </li> </ul>"},{"location":"developer-guide/extensions-dev/#building-zot-with-extensions","title":"Building zot with extensions","text":"<p>When you build the full zot image (for example, <code>make binary</code>), all extensions listed in the EXTENSIONS variable in <code>Makefile</code> are included in the build. When you've created a new extension, you must modify the EXTENSIONS variable in <code>Makefile</code> by adding the new extension. </p> <p>To build an image with only selected extensions, you can specify the desired extensions by declaring them in the build command:</p> <pre><code>make binary EXTENSIONS=extension1,extension2,extension3...\n</code></pre> <p>For example, to build with only sync and scrub, the command would be:</p> <pre><code>make binary EXTENSIONS=sync,scrub\n</code></pre>"},{"location":"developer-guide/onboarding/","title":"Onboarding zot for Development","text":"<p> zot is a production-ready, open-source, extensible OCI-native image registry, built for developers by developers.</p>"},{"location":"developer-guide/onboarding/#getting-started","title":"Getting Started","text":""},{"location":"developer-guide/onboarding/#supported-developer-platforms","title":"Supported Developer Platforms","text":"<p>Development is officially supported on <code>Linux</code> and <code>Apple MacOS</code> platforms. However, development should be possible on any platform that supports the <code>golang</code> toolchain.</p>    OS ARCH Platform     linux amd64 Intel-based Linux servers   linux arm64 ARM-based servers and Raspberry Pi4   darwin amd64 Intel-based MacOS   darwin arm64 ARM-based MacOS (Apple M1)    <p>Supported platforms and architectures</p>"},{"location":"developer-guide/onboarding/#prerequisites","title":"Prerequisites","text":""},{"location":"developer-guide/onboarding/#install-golang-119","title":"Install golang (1.19+)","text":"<p>The zot project requires <code>golang 1.19</code> or newer. You can follow these instructions to install the <code>golang</code> toolchain. After installation, make sure that the <code>path</code> environment variable or your IDE can find the toolchain.</p>"},{"location":"developer-guide/onboarding/#cloning-zot","title":"Cloning zot","text":"<p>The zot registry code base is hosted on GitHub at https://github.com/project-zot/zot.</p> <p>To clone the zot project, use this command:</p> <pre><code>$ git clone https://github.com/project-zot/zot.git\n</code></pre>"},{"location":"developer-guide/onboarding/#building-zot","title":"Building zot","text":"<p>To build zot, execute the <code>make</code> command in the zot directory using the following general syntax:</p> <p><code>$ make OS=os ARCH=architecture {binary | binary-minimal}</code></p> <ul> <li> <p>The operating system and architecture options are listed in the     Supported platforms and architectures     table. If an option is not specified, the defaults are <code>linux</code> and     <code>amd64</code>.</p> </li> <li> <p>The <code>binary</code> option builds the full zot binary image with all     extensions.</p> </li> <li> <p>The <code>binary-minimal</code> option builds the minimal distribution-spec     conformant zot binary image without extensions, reducing the attack     surface.</p> </li> </ul> <p>For example, to build a zot image with extensions for an Intel-based linux server, use the following command:</p> <pre><code>make OS=linux ARCH=amd64 binary\n</code></pre> <p>The <code>make</code> command builds an executable image in the <code>zot/bin</code> directory. The original filename of the zot executable image will indicate the build options. For example, the filename of an Intel-based linux minimal image is <code>zot-linux-amd64-minimal</code>.</p>  Click here to view an example of the getting started process. <p>  </p>"},{"location":"developer-guide/onboarding/#running-zot","title":"Running zot","text":"<p>The behavior of zot is controlled via configuration only. To launch the zot server, execute the following command:</p> <pre><code>$  bin/zot-linux-amd64 serve examples/config-example.json\n</code></pre>"},{"location":"developer-guide/onboarding/#debugging-zot","title":"Debugging zot","text":"<p>To produce a zot binary that includes extensive debugging information, build zot with the <code>binary-debug</code> option, as shown in this example:</p> <pre><code>make OS=linux ARCH=amd64 binary-debug\n</code></pre> <p>You can then attach and run a debugging tool such as Delve to the running zot process.</p> <p>Delve is a powerful open-source debugger for the Go programming language. Downloads and documentation for Delve are available on GitHub at https://github.com/go-delve/delve.</p>"},{"location":"developer-guide/onboarding/#code-organization","title":"Code Organization","text":"<p>The zot project codebase is organized as follows:</p> <pre><code>/\n- pkg/              # Source code for all libraries\n  - api/            # Source code for HTTP APIs\n    - config/       # Global configuration model\n  - storage/        # Source code for storage backends\n  - cli/            # Source code for command line interface (cli)\n  - common/         # Source code for common utility routines\n  - compliance/     # Source code for dist-spec conformance tests\n  - log/            # Source code for logging framework\n  - test/           # Internal test scripts/data\n  - extensions/     # Source code for all extensions\n    - config/\n    - sync/\n    - monitoring/\n    - sync/\n  - exporter/       # Source code for metrics exporter\n- cmd/              # Source code for binary main()s\n  - zot/            # Source code for zot binary\n  - zli/            # Source code for zot cli\n  - zb/             # Source code for zb, the dist-spec benchmarking tool\n- errors/           # Source code for error codes\n- examples/         # Configuration examples\n- swagger/          # Swagger integration\n- docs/             # Documentation\n</code></pre>"},{"location":"general/architecture/","title":"Architecture","text":"<p> zot is an OCI-native container image registry. This document discusses the design goals, the overall architecture, and the design choices made in the implementation of the design goals.</p>"},{"location":"general/architecture/#design-goals","title":"Design Goals","text":""},{"location":"general/architecture/#oci-first","title":"OCI-first","text":"<ul> <li> <p>HTTP APIs strictly conforms to the OCI Distribution     Specification</p> <p>zot intends to be a production reference implementation for the OCI Distribution Specification. In fact, zot does not support any other vendor protocol or specification.</p> </li> <li> <p>Storage layout follows the OCI Image     Specification</p> <p>The default and only supported storage layout is the OCI Image Layout. The implications of this choice are that any OCI image layout can be served by zot and conversely, zot converts data on-the-wire into an OCI image layout.</p> </li> </ul>"},{"location":"general/architecture/#single-binary-model","title":"Single binary model","text":"<p>zot is a single binary image with all features included so that deployment is extremely simple in various environments, including bare-metal, cloud, and embedded devices. Behavior is controlled by a single configuration file.</p>"},{"location":"general/architecture/#enable-only-what-you-need","title":"Enable Only What You Need","text":"<p>A clear separation exists between (1) the core OCI-compliant HTTP APIs and storage functionality, and (2) other add-on features modeled as extensions. The extension features can be selectively enabled both at build-time and run-time.</p> <p>For more information, see \"Conditional Builds\" in zot's security posture document.</p>"},{"location":"general/architecture/#overall-architecture","title":"Overall Architecture","text":"<p>As shown in the following figure, the architecture of zot is organized as: </p>  <p> zot-full = zot-minimal + extensions</p>   <p>The minimal build is the core OCI-compliant registry functionality as described by the OCI Distribution Specification. </p> <p>The full build adds features that are not a part of the Distribution Specification, but are allowed to be added as Extensions. </p>"},{"location":"general/architecture/#external-interaction","title":"External Interaction","text":"<p>External interaction with zot consists of the following two types:</p> <ul> <li> <p>Client-initiated data or meta-data queries</p> </li> <li> <p>Admin-initiated configuration</p> </li> </ul> <p>All client-side interaction occurs over HTTP APIs. The core data path queries are governed by the OCI Distribution Specification. All additional meta-data queries are handled based on the setting of the <code>search</code> extension:</p> <ul> <li> <p>If the <code>search</code> extension is enabled, enhanced registry searching     and filtering is supported, using graphQL. A database is maintained     by zot to efficiently answer complex queries on data stored in the     database.</p> </li> <li> <p>If the <code>search</code> extension is not enabled, basic queries are     supported using the core APIs. These queries are less efficient and     search actual storage, which is limited in content.</p> </li> </ul>"},{"location":"general/architecture/#configuration","title":"Configuration","text":"<p>A single configuration file governs zot instance behavior. An exception can be made for security concerns, wherein configuration items containing sensitive credentials can be stored in separate files referenced by the main configuration file. Using separate files allows stricter permissions to be enforced on those files if stored locally. Also, modeling as external files allows for storing Kubernetes Secrets.</p> <p>The configuration file is divided into sections for <code>http</code>, <code>storage</code>, <code>log</code>, and <code>extension</code>, governing the behavior of the respective components.</p>"},{"location":"general/architecture/#authentication-and-authorization","title":"Authentication and Authorization","text":"<p>A robust set of authentication and authorization options are supported natively in zot. These controls are enforced before access is allowed into the storage layer.</p> <p>For more information, see User Authentication and Authorization with zot.</p>"},{"location":"general/architecture/#storage-driver-support","title":"Storage Driver Support","text":"<p>zot supports any modern local filesystem. Remote filesystems, such as AWS S3 or any AWS S3-compatible storage system, are supported. Additional driver support is planned in the roadmap.</p>  <p> Deduplication is supported for both local and remote filesystems, but deduplication requires a filesystem with hard-link support.</p>  <p>For more information, see Storage Planning with zot.</p>"},{"location":"general/architecture/#security-scanning","title":"Security Scanning","text":"<p>zot integrates with the <code>trivy</code> security scanner to scan container images for vulnerabilities. The database is kept current by periodically downloading any vulnerability database updates at a configurable interval. The user remains agnostic of the actual scanner implementation, which may change over time.</p>"},{"location":"general/architecture/#extensions","title":"Extensions","text":"<p>Additional registry features that are not a part of the Distribution Specification are added as Extensions.  </p>  <p> Extension features of zot are available only with a full zot image. They are not supported in a minimal zot image.</p>  <p>For more information about extensions, see Extensions.</p>"},{"location":"general/architecture/#background-tasks","title":"Background Tasks","text":"<p>Several periodic tasks occur in the registry, such as garbage collection, sync mirroring, and scrubbing. A task scheduler handles these tasks in the background, taking care not to degrade or interrupt foreground tasks running in the context of HTTP APIs.</p>"},{"location":"general/concepts/","title":"Concepts","text":""},{"location":"general/concepts/#what-is-zot","title":"What is zot?","text":"<p> zot is a production-ready, open-source, vendor-neutral container image registry server based purely on OCI standards.</p>  <p>Two broad trends are changing how we build, distribute, and consume software. The first trend is the increasing adoption of container technologies. The second trend is that software solutions are being composed by combining elements from various sources rather than being built entirely from scratch. The latter trend raises the importance of software provenance and supply chain security. In both trends, zot intends to play an important role by providing a production-ready, open-source, vendor-neutral container image registry server based purely on OCI standards.</p>"},{"location":"general/concepts/#what-is-an-oci-image-registry","title":"What is an OCI image registry?","text":"<p>An OCI image registry is a server-based application that allows you to store, manage, and share container images. A developer uploads (pushes) an image to the registry for distribution. Users can then download (pull) the image to run on their systems. The OCI Distribution Specification, published by the Open Container Initiative (OCI), defines a standard API protocol for these and other image registry operations.</p> <p>An image registry can be a part of your continuous integration and continuous deployment (CI/CD) pipeline when you host zot on your public or private server. In its minimal form, you can also embed a zot registry in a product. In either case, zot provides a secure software supply chain for container images.</p>"},{"location":"general/concepts/#why-zot","title":"Why zot?","text":"<p> zot = OCI Distribution Specification + OCI Image Format</p>  <p>At its heart, zot is a production-ready, vendor-neutral OCI image registry with images stored in the OCI image format and with the OCI distribution specification on-the-wire. zot is built for developers by developers, offering features such as minimal deployment using a single binary image, built-in authentication and authorization, and inline garbage collection and storage deduplication.</p>  <p>Some of the principal advantages of zot are:</p> <ul> <li> <p>Open source</p> </li> <li> <p>OCI standards-only both on-the-wire and on-disk</p> </li> <li> <p>Clear separation between core distribution spec and zot-specific     extensions</p> </li> <li> <p>Software supply chain security, including support for     cosign and     notation</p> </li> <li> <p>Security hardening</p> </li> <li> <p>Single binary with many features built-in</p> </li> <li> <p>Suitable for deployments in cloud, bare-metal, and embedded devices</p> </li> </ul> <p>zot fully conforms to the OCI Distribution Specification.</p> <p>The following table lists additional advantages of zot:</p>          Distribution Spec conformance yes   CNCF project accepted as a Sandbox Project   License Apache 2.0   On-premise deployment yes   OCI conformance* yes   Single binary image* yes   Minimal build* yes   Storage Layout OCIv1 Image Layout   Authentication built-in   Authorization built-in   Garbage collection inline   Storage deduplication inline   Cloud storage support yes   Delete by tag yes   Vulnerability scanning built-in   Command line interface (cli) yes   UI yes   External contributions beta available   Image signatures built-in     <p> * The minimal build feature is the ability to build a minimal Distribution Spec compliant registry in order to reduce library dependencies and the possible attack surface.</p>"},{"location":"general/extensions/","title":"Extensions","text":"<p> Extensions provide additional registry features that are not a part of the Distribution Specification.</p> <p>The following extensions are currently available with zot:</p> <ul> <li>Search (enhanced)</li> <li>Sync</li> <li>Lint</li> <li>Scrub</li> <li>Metrics</li> </ul>"},{"location":"general/extensions/#about-extensions","title":"About extensions","text":"<p>The OCI Distribution Specification supports extending the functionality of an OCI-compliant registry implementation by adding extensions. Extensions are new APIs developed outside of the core OCI specs. Developers may propose their extensions to the OCI for possible future addition to the Distribution Specification.</p> <p>Wherever applicable, extensions can be dynamically discovered using the extensions support of the OCI Distribution Specification. </p>  <p> Extension features of zot are available only with a full zot image. They are excluded from the minimal zot image.</p>"},{"location":"general/extensions/#extensions-implemented-in-zot","title":"Extensions implemented in zot","text":"<p>The following extensions are currently supported:</p>"},{"location":"general/extensions/#search","title":"Search","text":"<p>One of the key functions of a container image registry (which is essentially a graph of blobs) is the ability to perform interesting image and graph traversal queries. The user interacts with the search extension via a graphQL endpoint. The schema is published with every release.</p> <p>Examples of queries are:</p> <ul> <li>\"Does an image exist?\"</li> <li>\"What is its size?\"</li> <li>\"Does an image depend on this image via its layers?\"</li> <li>\"What vulnerabilities exist in an image or its dependent images?\"</li> </ul>  <p>  Currently, search is the only zot extension that is accessible via HTTP APIs and is discoverable using the OCI extensions mechanism.</p>"},{"location":"general/extensions/#sync","title":"Sync","text":"<p>You can deplay a local mirror pointing to an upstream zot instance with various container image download policies, including on-demand and periodic downloads. The sync function is useful to avoid overwhelming the upstream instance, or if the upstream instance has rate-limited access.</p>  <p> <code>docker.io</code> is supported as an upstream mirror.</p>"},{"location":"general/extensions/#lint","title":"Lint","text":"<p>The lint extension helps to avoid image compliance issues by enforcing certain policies about the image or the image metadata. Currently, lint can check an uploaded image to enforce the presence of required annotations such as the author or the license.</p>"},{"location":"general/extensions/#scrub","title":"Scrub","text":"<p>Although container images are content-addressable with their SHA256 checksums, and validations are performed during storage and retrieval, it is possible that bit-rot sets in when not in use. The scrub extension actively scans container images in the background to proactively detect errors.</p>"},{"location":"general/extensions/#metrics","title":"Metrics","text":"<p>The metrics extension adds a node exporter, which is not present in the minimal build.</p> <p>For information about configuring zot extensions, see Configuring zot.</p>"},{"location":"general/features/","title":"Summary of Key Features","text":"<ul> <li>Conforms to OCI distribution spec APIs</li> <li>Uses OCI image layout for image storage</li> <li>Can serve any OCI image layout as a registry </li> <li>Single binary for all the features</li> <li>Doesn't require root privileges</li> <li>Clear separation between core dist-spec and zot-specific extensions</li> <li>Supports container image signatures - cosign and notation</li> <li>Supports helm charts</li> <li>Behavior controlled via configuration</li> <li>Binaries released for multiple os/arch</li> <li>Supports advanced image queries using search extension</li> <li>Supports image deletion by tag</li> <li>Currently suitable for on-prem deployments (e.g. colocated with Kubernetes)</li> <li>Compatible with ecosystem tools such as skopeo and cri-o</li> <li>Vulnerability scanning of images</li> <li>TLS support</li> <li>Authentication via:</li> <li>TLS mutual authentication</li> <li>HTTP Basic (local htpasswd and LDAP)</li> <li>HTTP Bearer token</li> <li>Supports Identity-Based Access Control</li> <li>Supports live modifications on the config file while zot is running (Authorization config only)</li> <li>Inline storage optimizations:</li> <li>Automatic garbage collection of orphaned blobs</li> <li>Layer deduplication using hard links when content is identical</li> <li>Data scrubbing</li> <li>Serve multiple storage paths (and backends) using a single zot server</li> <li>Pull and synchronize from other dist-spec conformant registries sync</li> <li>Supports ratelimiting including per HTTP method</li> <li>Metrics with Prometheus</li> <li>Using a node exporter in case of minimal zot</li> <li>Swagger based documentation</li> <li>zli: command-line client support</li> <li>Also, zb: a benchmarking tool for dist-spec conformant registries</li> <li>Released under  Apache 2.0 License</li> </ul>"},{"location":"general/glossary/","title":"Glossary","text":""},{"location":"general/glossary/#documentation-icons","title":"Documentation Icons","text":"Icon Description      Note \u2014 A point of emphasis or caution.    Tip \u2014 A helpful suggestion or a reference to additional material not covered in this document.    Warning \u2014 A suggestion or advisory intended to avoid a loss of service or data."},{"location":"general/glossary/#definitions","title":"Definitions","text":"Term Description     artifact A file of any kind produced during a container build process or associated with the operation of a container. For example, a Helm chart is an artifact that might be stored along with a container.   CNCF As part of the Linux Foundation, the Cloud Native Computing Foundation provides support, oversight, and direction for open-source, cloud native projects.   cosign <code>cosign</code> is a tool that performs container signing, verification, and storage in an OCI registry.   cosigned <code>cosigned</code> is an image admission controller that validates container images before deploying them.   cri-o <code>cri-o</code> is an implementation of the Kubernetes Container Runtime Interface (CRI) to enable using OCI compatible runtimes. It is a lightweight alternative to using Docker as the runtime for Kubernetes.   deduplication A storage space saving feature wherein only a single copy of specific content is maintained on disk while many different image manifests may hold references to that same content.   digest A hashed checksum, such as SHA-256, for verifying the integrity of the downloaded image.   Distribution Specification The OCI Distribution Specification project defines an API protocol to facilitate and standardize the distribution of content.   extensions Additional registry features (APIs) that are not a part of the Distribution Specification can be added as Extensions.   helm chart A helm chart is a package of files that orchestrate the deployment of Kubernetes resources into a Kubernetes cluster.   manifest An image manifest provides a configuration and set of layers for a single container image for a specific architecture and operating system.   node exporter A software component that collects hardware and operating system level metrics exposed by the kernel.   OCI The Open Container Initiative (OCI) is an open governance structure for the express purpose of creating open industry standards around container formats and runtimes.   ORAS OCI Registry as Storage (ORAS) is a tool for distributing OCI artifacts across OCI registries.   prometheus Prometheus is a node exporter that exposes a wide variety of hardware- and kernel-related metrics.   registry A service that stores and distributes container images and artifacts.   repository A collection of images with the same name, differentiated by tags.   skopeo <code>skopeo</code> is a command line utility that performs various operations on container images and image repositories.   stacker <code>stacker</code> is a standalone tool for building OCI images via a declarative <code>yaml</code> format. The output of the build process is a container image in an OCI layout.   tag A label applied to an image that distinguishes the image from other images in the same repository. A common example is a version tag.   zb A benchmarking tool, available as a zot companion binary, for benchmarking a zot registry or any other container image registry that conforms to the OCI Distribution Specification.   zli A zot companion binary that implements a set of command line commands for interacting with the zot registry server.   zui A zot companion binary that implements a graphical user interface (GUI) for interacting with the zot registry server.   zxp A node exporter, available as a zot companion binary,  that can be deployed with a minimal zot image in order to scrape metrics from the zot server."},{"location":"general/project/","title":"About the zot Project","text":""},{"location":"general/project/#project-repository","title":"Project Repository","text":"<p>The zot project is hosted on GitHub:</p> <p>project-zot/zot</p>"},{"location":"general/project/#sponsors","title":"Sponsors","text":"<p>Cisco Systems, Inc.</p>"},{"location":"general/project/#adopters","title":"Adopters","text":"<p>Cisco Systems, Inc.</p>"},{"location":"general/project/#presentations","title":"Presentations","text":"<p>OCI Weekly Discussion - Oct 2, 2019</p>"},{"location":"general/releases/","title":"Released Images for zot","text":"<p> This document describes the available zot images for the various supported hardware and software platforms, along with information about image variations, image locations, and image naming formats.</p>"},{"location":"general/releases/#supported-platforms","title":"Supported platforms","text":"<p>zot is supported on Linux and Apple MacOS platforms with Intel or ARM processors.</p> <p>Table: Supported platforms and architectures</p>    OS ARCH Platform     linux amd64 Intel-based Linux servers   linux arm64 ARM-based servers and Raspberry Pi4   darwin amd64 Intel-based MacOS   darwin arm64 ARM-based MacOS (Apple M1)"},{"location":"general/releases/#full-and-minimal-binary-images","title":"Full and minimal binary images","text":"<p>In addition to variations for specific platforms and architectures, binary images are also available in full and minimal flavors:</p> <ul> <li> <p>A full zot binary image is compiled with all extensions. Extensions include functions such as metrics, registry synchronization, search, and scrub.</p> </li> <li> <p>A minimal distribution-spec conformant zot binary image is compiled with only a minimal set of code and libraries, reducing the attack surface. This option might be optimal for a registry embedded in a shipping product.</p> </li> </ul>"},{"location":"general/releases/#binary-image-file-naming","title":"Binary image file naming","text":"<p>An executable binary image for zot is named using the target platform and architecture from the Supported platforms and architectures table. The general format of a binary image file name is one of these two:</p> <p><code>zot-&lt;os&gt;-&lt;architecture&gt;</code></p> <ul> <li>A full zot binary image with all extensions has a filename of the form <code>zot-&lt;os&gt;-&lt;architecture&gt;.</code> For example, the full binary image for an Intel-based linux server is <code>zot-linux-amd64</code>.</li> </ul> <p><code>zot-&lt;os&gt;-&lt;architecture&gt;-minimal</code></p> <ul> <li>A minimal distribution-spec conformant zot binary image has a filename of the form <code>zot-&lt;os&gt;-&lt;architecture&gt;-minimal</code>. For example, the minimal binary image for an Intel-based linux server is <code>zot-linux-amd64-minimal</code>.</li> </ul>  <p> For convenience, you can rename the binary image file to simply <code>zot</code> after downloading.</p>"},{"location":"general/releases/#where-to-get-zot","title":"Where to get zot","text":"<p>You can download native executable binary images or container (Docker) images.</p>"},{"location":"general/releases/#getting-binary-images","title":"Getting binary images","text":"<p>The zot project is hosted on GitHub at project-zot.  </p> <p>To download a binary image, go to the zot releases and select a release. Go to the Assets section of the release page and download the binary for your platform and architecture.</p>  <p>  You may need to use the <code>chmod</code> command to make the image executable.</p> <p>  When downloading a binary image for MacOS, download the darwin image.</p>"},{"location":"general/releases/#getting-container-images","title":"Getting container images","text":"<p>You can download a container image from <code>ghcr.io</code> by forming a URL with the desired image name, such as:</p> <pre><code>https://ghcr.io/project-zot/zot-&lt;os&gt;-&lt;architecture&gt;[-&lt;build&gt;]\n</code></pre> <p>If <code>&lt;build&gt;</code> is not specified, the default is <code>full</code>. For example, to download the minimal binary image for an Intel-based linux server. The URL is:</p> <pre><code>https://ghcr.io/project-zot/zot-linux-amd64-minimal\n</code></pre>  <p>  When downloading a container image for MacOS, download the linux image, not the darwin image.</p>"},{"location":"general/releases/#licensing","title":"Licensing","text":"<p>zot is released under the Apache License 2.0.</p>"},{"location":"general/whats-new/","title":"What's New","text":""},{"location":"general/whats-new/#v143","title":"v1.4.3","text":""},{"location":"general/whats-new/#support-for-oci-artifacts-and-references","title":"Support for OCI Artifacts and References","text":"<ul> <li>The OCI Image Spec v1.1.0 supports arbitrary artifact types and references so that software supply chain use cases can be supported (SBOMs, signatures, etc). Currently, <code>oras</code> and <code>regclient</code> support this spec.</li> </ul>"},{"location":"general/whats-new/#remote-only-storage-support","title":"Remote-only Storage Support","text":"<ul> <li>The two types of state (images and image metadata) can both now be on remote storage so that zot process lifecycle and its storage can be managed and scaled independently.</li> </ul>"},{"location":"general/whats-new/#digest-collision-detection-during-image-deletion","title":"Digest Collision Detection During Image Deletion","text":"<ul> <li>When two or more image tags point to the same image digest and the image is deleted by digest causes data loss and dangling references. A new behavior-based policy called detectManifestCollision was added to prevent this.</li> </ul>"},{"location":"install-guides/install-guide-k8s/","title":"Installing zot with Kubernetes and Helm","text":"<p> Using Kubernetes with Helm charts for zot, you can easily deploy zot as an application in a Kubernetes cluster.</p>"},{"location":"install-guides/install-guide-k8s/#before-you-begin","title":"Before you begin","text":""},{"location":"install-guides/install-guide-k8s/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>kubectl must be installed and a Kubernetes cluster must be ready.</p> </li> <li> <p>Helm must be installed.</p> </li> </ul>"},{"location":"install-guides/install-guide-k8s/#supported-platforms","title":"Supported platforms","text":"<p>You can install zot on standard Linux platforms with Intel or ARM processors and with systemd installed.</p>    OS ARCH Platform     linux amd64 Intel-based Linux servers   linux arm64 ARM-based servers and Raspberry Pi4    <p>Supported platforms and architectures</p>"},{"location":"install-guides/install-guide-k8s/#about-binary-images","title":"About binary images","text":"<p>Refer to Released Images for zot for information about available zot images along with information about image variations, image locations, and image naming formats.</p>"},{"location":"install-guides/install-guide-k8s/#installing-zot","title":"Installing zot","text":""},{"location":"install-guides/install-guide-k8s/#step-1-locate-the-helm-charts-in-a-remote-repository","title":"Step 1: Locate the Helm charts in a remote repository","text":"<ol> <li> <p>Specify a remote repository that contains the Helm charts for zot.     Give the repo a local name, such as project-zot, as in this     example:</p> <p><code>$ helm repo add project-zot http://zotregistry.io/helm-charts</code></p> <pre><code>\"project-zot\" has been added to your repositories\n</code></pre>   <p>The Helm charts for zot are currently hosted in these publicly-accessible repositories: - zotregistry.io - artifacthub.io </p>  </li> <li> <p>Search the repository to see the Helm charts for zot installation.     Search using the keyword 'project-zot' or 'zot', as in this example:</p> <p><code>$ helm search repo project-zot</code></p> <pre><code>NAME             CHART VERSION  APP VERSION  DESCRIPTION\nproject-zot/zot  0.1.0          v1.4.3       A Helm chart for Kubernetes\n</code></pre>   <p>The APP VERSION is the version/tag of the zot image used for the deployment.</p>  </li> <li> <p>Update to the latest information of available charts from the chart     repository, as shown in this example:</p> <p><code>$ helm repo update project-zot</code></p> <pre><code>Hang tight while we grab the latest from your chart repositories...\n...Successfully got an update from the \"project-zot\" chart repository\nUpdate Complete. \u2388Happy Helming!\u2388\n</code></pre> </li> <li> <p>Display the default information of the Helm chart, as shown in this     example:</p> </li> </ol> <p><code>$ helm show all project-zot/zot</code></p> <pre><code>    apiVersion: v2\n    appVersion: v1.4.3\n    description: A Helm chart for Kubernetes\n    name: zot\n    type: application\n    version: 0.1.16\n\n    # Default values for zot.\n    # This is a YAML-formatted file.\n    # Declare variables to be passed into your templates.\n    replicaCount: 1\n    image:\n      repository: ghcr.io/project-zot/zot-linux-amd64\n      pullPolicy: IfNotPresent\n      tag: \"v1.4.3\"\n    serviceAccount:\n      create: true\n      annotations: {}\n      name: \"\"\n    service:\n      type: NodePort\n      port: 5000\n</code></pre>"},{"location":"install-guides/install-guide-k8s/#step-2-determine-any-needed-changes-from-the-helm-charts-defaults","title":"Step 2: Determine any needed changes from the Helm chart\u2019s defaults","text":"<p>Inspect the default information of the Helm chart, as shown in the previous step. In many cases, the default chart values may be acceptable. If your installation requires any non-default settings, you may be able to specify them during the installation. Not all chart values are configurable, but you can display those that are configurable using the command in the following example:</p> <p><code>$ helm show values project-zot/zot</code></p> <pre><code>  # Default values for zot.\n  # This is a YAML-formatted file.\n  # Declare variables to be passed into your templates.\n  replicaCount: 1\n  image:\n    repository: ghcr.io/project-zot/zot-linux-amd64\n    pullPolicy: IfNotPresent\n    tag: \"v1.4.3\"\n  serviceAccount:\n    create: true\n    annotations: {}\n    name: \"\"\n  service:\n    type: NodePort\n    port: 5000\n</code></pre> <p>The configurable settings in the chart are listed in the following table:</p>        parameter description     <p>replicaCount</p> <p>Desired number of replicas of the application</p>   <p>image.repository</p> <p>Repository and image name for the application</p>   <p>image.pullPolicy</p> <p>Whether to pull the image from the repository. If not specified, the policy depends on <code>image.tag</code>:</p> <ul> <li><p>If tag is <code>:latest</code> or no tag: <code>Always</code></p></li> <li><p>If tag is other than <code>:latest</code>: <code>IfNotPresent</code></p></li> </ul>   <p>image.tag</p> <p>Identifies different versions the image. default is the chart <code>appVersion</code>.</p> <p>Examples: <code>:latest</code> (the default) or <code>:v1.4.3</code></p>   <p>serviceAccount.create</p> <p>Specifies whether a service account should be created</p>   <p>serviceAccount.annotations</p> <p>Annotations to add to the service account</p>   <p>serviceAccount.name</p> <p>Name of the service account to use. If <code>name</code> is not set and <code>create</code> is true, a name is generated using the fullname template.</p>   <p>service.type</p> <p>ClusterIP (default), NodePort, LoadBalancer, ExternalName, or Headless</p>   <p>service.port</p> <p>Port number for calling the service</p>"},{"location":"install-guides/install-guide-k8s/#customizing-the-helm-chart-using-set","title":"Customizing the Helm chart using 'set'","text":"<p>To override the default values in the chart, you can pass your custom values by adding the <code>--set</code> flag in the <code>helm install</code> command.</p> <p>For example, if your servers use an ARM processor instead of Intel, you must change the <code>image.repository</code> name from zot-linux-amd64 to zot-linux-arm64:</p> <p><code>--set image.repository=ghcr.io/project-zot/zot-linux-arm64</code></p> <p>You can change multiple settings with one <code>--set</code> statement. For example, you might want your installation to have more replicas or a different port number:</p> <p><code>--set replicaCount=2,service.port=5050</code></p>"},{"location":"install-guides/install-guide-k8s/#customizing-the-helm-chart-using-a-file","title":"Customizing the Helm chart using a file","text":"<p>You can also create a YAML file with your overrides and then add the new file by adding the <code>-f</code> flag to the <code>helm install</code> command. For example, to override the replica count and port number, the contents of your YAML file (for example, \"myfile.yaml\") would be:</p> <pre><code>replicaCount: 2\nservice:\n  port: 5050\n</code></pre> <p>and the following flag would be added to the <code>helm install</code> command:</p> <p><code>-f myfile.yaml</code></p>"},{"location":"install-guides/install-guide-k8s/#additional-information","title":"Additional information","text":"<p>See the Helm documentation for further information about modifying the Helm chart.</p>"},{"location":"install-guides/install-guide-k8s/#step-3-install-zot","title":"Step 3: Install zot","text":"<p>Install zot using the <code>helm install</code> command. The first example shows how to perform a default installation. The additional examples show different ways to modify the <code>helm install</code> command to override default settings in the Helm chart:</p> <p>Example 1: use default chart parameters</p> <p><code>$ helm install zot project-zot/zot</code></p> <pre><code>NAME: zot\nLAST DEPLOYED: Thu Aug 11 19:13:02 2022\nNAMESPACE: default\nSTATUS: deployed\nREVISION: 1\nNOTES:\n Get the application URL by running these commands:\n export NODE_PORT=$(kubectl get --namespace default -o jsonpath=\"{.spec.ports[0].nodePort}\" services zot)\n export NODE_IP=$(kubectl get nodes --namespace default -o jsonpath=\"{.items[0].status.addresses[0].address}\")\n echo http://$NODE_IP:$NODE_PORT\n</code></pre> <p>Example 2: modify specific chart parameters with 'set'</p> <p><code>$ helm install --set replicaCount=2,service.port=5050 zot project-zot/zot</code></p> <p>Example 3: modify specific chart parameters with a file</p> <p><code>$ helm install -f myfile.yaml zot project-zot/zot</code></p> <p>Example 4: use a specific version of the Helm chart</p> <p><code>$ helm install zot project-zot/zot --version 0.1.0</code></p> <p>Example 5: link to a kubeconfig file</p> <p><code>$ helm install zot project-zot/zot --kubeconfig $HOME/.kube/config</code></p>"},{"location":"install-guides/install-guide-k8s/#after-the-installation","title":"After the installation","text":""},{"location":"install-guides/install-guide-k8s/#verify-the-installation","title":"Verify the installation","text":"<ol> <li> <p>List all releases that are either deployed or failed.</p> <p><code>$ helm list</code></p> <pre><code>NAME  NAMESPACE  REVISION  UPDATED    STATUS    CHART      APP VERSION\nzot   default    1         &lt;datetime&gt; deployed  zot-0.1.0  v1.4.3\n</code></pre> <p>This response indicates that zot is deployed.</p> </li> <li> <p>After making sure that your pods are up and running, execute the     following commands:</p> <pre><code>$ export NODE_PORT=$(kubectl get --namespace default -o jsonpath=\"{.spec.ports[0].nodePort}\" services zot)\n$ export NODE_IP=$(kubectl get nodes --namespace default -o jsonpath=\"{.items[0].status.addresses[0].address}\")\n$ echo http://$NODE_IP:$NODE_PORT\n$ curl http://$NODE_IP:$NODE_PORT/v2/_catalog\n</code></pre> <p>The response should display the current contents of your zot repository, which should be empty immediately after installation:</p> <pre><code>{\"repositories\":[]}\n</code></pre> </li> </ol>"},{"location":"install-guides/install-guide-k8s/#edit-the-zot-configuration-file","title":"Edit the zot configuration file","text":"<p>The zot configuration file is a JSON or YAML file that contains all configuration settings for zot functions such as:</p> <ul> <li> <p>network</p> </li> <li> <p>storage</p> </li> <li> <p>authentication</p> </li> <li> <p>authorization</p> </li> <li> <p>logging</p> </li> <li> <p>metrics</p> </li> <li> <p>synchronization with other registries</p> </li> <li> <p>clustering</p> </li> </ul> <p>The Helm chart installs a minimal JSON configuration file as shown below:</p> <pre><code>{\n    \"storage\":\n    {\n        \"rootDirectory\": \"/var/lib/registry\"\n    },\n    \"http\":\n    {\n        \"address\": \"0.0.0.0\",\n        \"port\": \"5000\"\n    },\n    \"log\":\n    {\n        \"level\": \"debug\"\n    }\n}\n</code></pre> <p>The zot configuration file is located at <code>/etc/zot/config.json</code>.</p> <p>Refer to Configuring zot for complete information on configuring the zot server with the zot configuration file.</p>"},{"location":"install-guides/install-guide-k8s/#uninstalling-zot","title":"Uninstalling zot","text":"<p>Should you need to uninstall zot, use the <code>helm uninstall</code> command, as in this example:</p> <p><code>$ helm uninstall zot</code></p>"},{"location":"install-guides/install-guide-linux/","title":"Installing zot on Bare Metal Linux","text":"<p> Using an available executable zot image, you can easily deploy zot on a Linux server.</p>"},{"location":"install-guides/install-guide-linux/#before-you-begin","title":"Before you begin","text":""},{"location":"install-guides/install-guide-linux/#about-binary-images","title":"About binary images","text":"<p>Executable binary zot images are available for multiple platforms and architectures and with full or minimal implementations.</p> <p>Refer to Released Images for zot for information about available zot images along with information about image variations, image locations, and image naming formats.</p>"},{"location":"install-guides/install-guide-linux/#installation","title":"Installation","text":""},{"location":"install-guides/install-guide-linux/#step-1-get-zot","title":"Step 1: Get zot","text":"<p>Using <code>wget,</code> download the appropriate zot binary image for your platform from the zot GitHub project. Download the image to the`/usr/bin/` directory and rename it to <code>zot,</code> as in this example:</p> <pre><code>$ wget -O /usr/bin/zot  https://github.com/project-zot/zot/releases/download/v1.4.2-rc2/zot-linux-amd64\n</code></pre>"},{"location":"install-guides/install-guide-linux/#step-2-create-a-zot-configuration-file","title":"Step 2: Create a zot configuration file","text":"<p>Create a zot configuration file as <code>/etc/zot/config.json</code>.</p> <p>See Configuration file options for an example file with options and recommendations. You can find other configuration file examples in the zot GitHub project and in Configuring zot.</p>"},{"location":"install-guides/install-guide-linux/#step-3-configure-a-local-authentication-account","title":"Step 3: Configure a local authentication account","text":"<p>If you want to use local authentication with zot, create a <code>/etc/zot/htpasswd</code> file with an initial account entry using the <code>htpasswd</code> command as in this example:</p> <pre><code>$ htpasswd -bnB myUserName myPassword &gt; /etc/zot/htpasswd\n</code></pre> <p>To add additional local users, use the <code>&gt;&gt;</code> redirect as in this example:</p> <pre><code>$ htpasswd -bnB myUserName2 myPassword2 &gt;&gt; /etc/zot/htpasswd\n</code></pre>"},{"location":"install-guides/install-guide-linux/#step-4-define-the-zot-service","title":"Step 4: Define the zot service","text":"<p>Create a <code>/etc/systemd/system/zot.service</code> file to define the zot service in systemd. The following is an example service file for zot:</p> <pre><code>[Unit]\nDescription=OCI Distribution Registry\nDocumentation=https://zotregistry.io/\nAfter=network.target auditd.service local-fs.target\n\n[Service]\nType=simple\nExecStart=/usr/bin/zot serve /etc/zot/config.json\nRestart=on-failure\nUser=zot\nGroup=zot\nLimitNOFILE=500000\nMemoryHigh=30G\nMemoryMax=32G\n\n[Install]\nWantedBy=multi-user.target\n</code></pre>  <p> Be sure to configure a dedicated non-root user ID as the User and Group in the zot service definition. The 'zot' user ID in this example is created in the next step.</p>"},{"location":"install-guides/install-guide-linux/#step-5-create-a-user-id-to-own-the-zot-service","title":"Step 5: Create a user ID to own the zot service","text":"<p>Create a non-root user ID to be the owner of the zot service and its resources.</p> <p>In this example, the user ID 'zot' is created with the <code>adduser</code> command, and resource ownership is assigned.</p> <pre><code>$ sudo adduser --no-create-home --disabled-password --gecos --disabled-login zot\n\n$ sudo mkdir -p /data/zot\n$ sudo chown -R zot:zot /data/zot\n\n$ sudo mkdir -p /var/log/zot\n$ sudo chown -R zot:zot /var/log/zot\n\n$ sudo chown root:root /usr/bin/zot\n$ sudo chown root:root config.json\n</code></pre> <p>With the <code>adduser</code> options shown, the 'zot' user ID has no local directory. There is no ability to log into the zot user account, and the account has no finger information.</p>"},{"location":"install-guides/install-guide-linux/#step-6-start-zot","title":"Step 6: Start zot","text":"<p>Enable and start the zot service with these commands:</p> <pre><code>$ sudo systemctl enable zot\n$ sudo systemctl start zot\n</code></pre> <p>When the zot service has started, you can check its status with this command:</p> <pre><code>$ sudo systemctl status zot\n</code></pre>"},{"location":"install-guides/install-guide-linux/#after-the-installation","title":"After the installation","text":"<p>If your zot registry server is public facing, we recommend that you test your TLS configuration using a service such as the Qualys SSL Server Test.</p> <p>Refer to Configuring zot for further information about maintaining your zot registry server.</p>"},{"location":"install-guides/install-guide-linux/#configuration-file-options-and-recommendations","title":"Configuration file options and recommendations","text":"<p>The following zot configuration file (<code>config.json</code>) can be used as a template for your own installation. You can modify this file to suit your own environment.</p>  Click here to view the sample configuration file. <pre><code>{\n  \"distSpecVersion\":\"1.0.1\",\n  \"storage\":{\n    \"dedupe\": true,\n    \"gc\": true,\n    \"gcDelay\": \"1h\",\n    \"gcInterval\": \"6h\",\n    \"rootDirectory\":\"/data/zot/\"\n  },\n  \"http\": {\n    \"address\":\"0.0.0.0\",\n    \"port\":\"443\",\n    \"realm\":\"zot\",\n    \"tls\": {\n      \"cert\": \"/etc/letsencrypt/live/zothub.io/fullchain.pem\",\n      \"key\": \"/etc/letsencrypt/live/zothub.io/privkey.pem\"\n    },\n    \"auth\": {\n      \"htpasswd\": {\n        \"path\": \"/etc/zot/htpasswd\"\n      },\n      \"failDelay\": 5\n    },\n    \"allowReadAccess\": true\n  },\n  \"log\":{\n    \"level\":\"debug\",\n    \"output\":\"/var/log/zot/zot.log\",\n    \"audit\":\"/var/log/zot/zot-audit.log\"\n  },\n  \"extensions\": {\n    \"search\": {\n      \"enable\": true,\n      \"cve\": {\n        \"updateInterval\": \"24h\"\n      }\n    },\n    \"sync\": {\n      \"enable\": false,\n      \"registries\": [\n        {\n          \"urls\": [\"https://mirror.gcr.io/library\"],\n          \"onDemand\": true,\n          \"maxRetries\": 3,\n          \"retryDelay\": \"5m\",\n          \"pollInterval\": \"6h\"\n        },\n        {\n          \"urls\": [\"https://docker.io/library\"],\n          \"onDemand\": true\n        }\n      ]\n    },\n    \"scrub\": {\n      \"interval\": \"24h\"\n    }\n  }\n}\n</code></pre>  <p>Refer to Configuring zot for more details about configuration file options.</p>"},{"location":"install-guides/install-guide-linux/#tls-encryption","title":"TLS encryption","text":"<p>We recommend using a certificate authority such as Let\u2019s Encrypt that offers TLS encryption, as shown in this configuration example:</p> <pre><code>\"tls\": {\n  \"cert\": \"/etc/letsencrypt/live/zothub.io/fullchain.pem\",\n  \"key\": \"/etc/letsencrypt/live/zothub.io/privkey.pem\"\n}\n</code></pre>"},{"location":"install-guides/install-guide-linux/#registry-synchronization","title":"Registry synchronization","text":"<p>The example file enables registry synchronization with two other container registries. In the example, the zot server synchronizes with the Google and Docker container registries, as shown here:</p> <pre><code>\"sync\": {\n  \"enable\": false,\n  \"registries\": [\n    {\n      \"urls\": [\"https://mirror.gcr.io/library\"],\n      \"onDemand\": true,\n      \"maxRetries\": 3,\n      \"retryDelay\": \"5m\",\n      \"pollInterval\": \"6h\"\n    },\n    {\n      \"urls\": [\"https://docker.io/library\"],\n      \"onDemand\": true\n    }\n  ]\n}\n</code></pre>"},{"location":"user-guides/user-guide-datapath/","title":"Push and Pull Image Content","text":"<p> zot is an OCI image registry that allows you to store, manage, and share container images.</p>  <p>A zot registry can store and serve a variety of content, but the type of content may dictate your choice of a client tool.</p> <p>For various content types, this document shows examples of using a third-party client tool that supports the content. The following table shows which content and client tools are demonstrated.</p>    Content Type Client     OCI images skopeo   OCI images regclient (<code>regctl</code>)   OCI images crane   OCI artifacts oras   Helm charts helm     <p> zot is compatible with kubernetes/cri-o using <code>docker://</code> transport, which is the default.</p> <p> In the following examples, the zot registry is located at <code>localhost</code>, using port number 5000.</p>"},{"location":"user-guides/user-guide-datapath/#common-tasks-using-skopeo-for-oci-images","title":"Common tasks using skopeo for OCI images","text":"<p><code>skopeo</code> is a command line client that performs various operations on OCI container images and image repositories.</p>  <p> For detailed information about using skopeo, see the skopeo man page.</p>"},{"location":"user-guides/user-guide-datapath/#push-an-oci-image","title":"Push an OCI image","text":"<p>This example pushes the latest container image for the <code>busybox</code> application to a zot registry.</p> <pre><code>$ skopeo --insecure-policy copy --dest-tls-verify=false --multi-arch=all \\\n   --format=oci docker://busybox:latest \\\n   docker://localhost:5000/busybox:latest\n</code></pre>"},{"location":"user-guides/user-guide-datapath/#pull-an-oci-image","title":"Pull an OCI image","text":"<p>This example pulls the latest container image for the <code>busybox</code> application and stores the image to a local OCI-layout directory (<code>/oci/images</code>).</p> <pre><code>$ skopeo --insecure-policy copy --src-tls-verify=false --multi-arch=all \\\n   docker://localhost:5000/busybox:latest \\\n   oci:/oci/images:busybox:latest\n</code></pre>"},{"location":"user-guides/user-guide-datapath/#pull-an-oci-image-to-a-private-docker-registry","title":"Pull an OCI image to a private docker registry","text":"<p>This example pulls the latest container image for the <code>busybox</code> application and stores the image to a local private docker registry.</p> <pre><code>$ skopeo --insecure-policy copy --src-tls-verify=false --multi-arch=all \\\n   docker://localhost:5000/busybox:latest \\\n   docker://localhost:5000/busybox:latest\n</code></pre>  Click here to view an example of pushing and pulling an image using skopeo. <p>  </p>"},{"location":"user-guides/user-guide-datapath/#authentication","title":"Authentication","text":"<p>In these examples, authentication is disabled for the source and destination. You can enable authentication by changing the command line options as follows:</p> <pre><code>--src-tls-verify=true\n--dest-tls-verify=true\n</code></pre> <p>You can also add credentials for authenticating with a source or destination repository:</p> <pre><code>--src-creds username:password\n--dest-creds username:password\n</code></pre>"},{"location":"user-guides/user-guide-datapath/#common-tasks-using-regclient-for-oci-images","title":"Common tasks using regclient for OCI images","text":"<p>regclient is a client interface that performs various operations on OCI container images and image repositories. The command line interface for regclient is <code>regctl.</code></p>  <p> For detailed information about <code>regctl</code> commands, see the regctl Documentation.</p>"},{"location":"user-guides/user-guide-datapath/#push-an-oci-image_1","title":"Push an OCI image","text":"<p>This example pushes version 1.18 of <code>golang</code> to a <code>tools</code> repository within the registry.</p> <pre><code>$ regctl registry set --tls=disabled localhost:5000\n$ regctl image copy ocidir://path/to/golang:1.18 localhost:5000/tools\n</code></pre>"},{"location":"user-guides/user-guide-datapath/#pull-an-oci-image_1","title":"Pull an OCI image","text":"<p>This example pulls version 1.18 of <code>golang</code> to a local OCI-layout directory.</p> <pre><code>$ regctl image copy localhost:5000/tools ocidir://path/to/golang:1.18\n</code></pre>"},{"location":"user-guides/user-guide-datapath/#list-all-repositories-in-registry","title":"List all repositories in registry","text":"<p>This example list all repositories in the registry.</p> <pre><code>$ regctl repo ls localhost:5000\n</code></pre>"},{"location":"user-guides/user-guide-datapath/#list-tags","title":"List tags","text":"<p>This example lists all tags in the <code>tools</code> repository within the registry.</p> <pre><code>$ regctl tag ls localhost:5000/tools\n</code></pre>"},{"location":"user-guides/user-guide-datapath/#pull-and-push-manifest","title":"Pull and push manifest","text":"<p>This example pulls and pushes the manifest in the <code>tools</code> repository within the registry.</p> <pre><code>$ regctl manifest get localhost:5000/tools --format=raw-body\n$ regctl manifest put localhost:5000/tools:1.0.0 \\\n--format oci --content-type application/vnd.oci.image.manifest.v1+json \\\n--format oci\n</code></pre>"},{"location":"user-guides/user-guide-datapath/#authentication_1","title":"Authentication","text":"<p>In the preceding examples, TLS authentication with the zot registry was disabled by the following command:</p> <pre><code>$ regctl registry set --tls=disabled localhost:5000\n</code></pre> <p>This command allows <code>regctl</code> to accept an HTTP response from the zot server. If TLS authentication is enabled on the zot registry server, you can omit this command from your <code>regctl</code> session.</p>"},{"location":"user-guides/user-guide-datapath/#common-tasks-using-oras-for-oci-artifacts","title":"Common tasks using oras for OCI artifacts","text":"<p>ORAS (OCI Registry As Storage) is a command line client for storing OCI artifacts on OCI repositories.</p>  <p> For detailed information about the <code>oras</code> commands in these examples, see the ORAS CLI documentation.</p>"},{"location":"user-guides/user-guide-datapath/#push-an-artifact","title":"Push an artifact","text":"<p>This example pushes version 2 of an artifact file named <code>hello-artifact</code> to a zot registry.</p> <pre><code>$ oras push --plain-http localhost:5000/hello-artifact:v2 \\\n        --config config.json:application/vnd.acme.rocket.config.v1+json \\\n        artifact.txt:text/plain -d -v\n</code></pre>"},{"location":"user-guides/user-guide-datapath/#pull-an-artifact","title":"Pull an artifact","text":"<p>This example pulls version 2 of an artifact file named <code>hello-artifact</code> from a zot registry.</p> <pre><code>$ oras pull --plain-http localhost:5000/hello-artifact:v2 -d -v\n</code></pre>  Click here to view an example of pushing and pulling an artifact using oras. <p>  </p>"},{"location":"user-guides/user-guide-datapath/#attach-a-reference","title":"Attach a reference","text":"<pre><code>$ echo '{\"artifact\": \"localhost:5000/hello-artifact:v2\", \"signature\": \"pat hancock\"}' &gt; signature.json\n\n$ oras push localhost:5000/hello-artifact \\\n  --artifact-type 'signature/example' \\\n  --subject localhost:5000/hello-artifact:v2 \\\n  ./signature.json:application/json\n\n$ oras discover -o tree localhost:5000/hello-artifact:v2\n</code></pre>"},{"location":"user-guides/user-guide-datapath/#authentication_2","title":"Authentication","text":"<p>To authenticate with the zot server, log in at the start of your session using the following command:</p> <pre><code>$ oras login -u myUsername -p myPassword localhost:5000\n</code></pre> <p>You can also add credentials in the push or pull commands as in this example:</p> <pre><code>$ oras pull -u myUsername -p myPassword localhost:5000/hello-artifact:v2 -d -v\n</code></pre>  <p> For additional authentication options, including interactive credential entry and disabling TLS, see the ORAS login documentation.</p>"},{"location":"user-guides/user-guide-datapath/#common-tasks-using-helm-for-helm-charts","title":"Common tasks using helm for helm charts","text":"<p>Helm is a package manager for Kubernetes. Among many other capabilities, helm can store and retrieve helm charts on OCI image repositories.</p>  <p> For detailed information about the <code>helm</code> commands in these examples, see Commands for working with registries in the helm documentation.</p>"},{"location":"user-guides/user-guide-datapath/#push-a-helm-chart","title":"Push a helm chart","text":"<p>This example pushes version 1.2.3 of a zot helm chart to a <code>zot-chart</code> repository within the registry.</p> <pre><code>$ helm package path/to/helm-charts/charts/zot\n$ helm push zot-1.2.3.tgz oci://localhost:5000/zot-chart\n</code></pre>"},{"location":"user-guides/user-guide-datapath/#pull-a-helm-chart","title":"Pull a helm chart","text":"<p>This example pulls version 1.2.3 of a zot helm chart from a <code>zot-chart</code> repository within the registry.</p> <pre><code>$ helm pull oci://localhost:5000/zot-chart/zot --version 1.2.3\n</code></pre>"},{"location":"user-guides/user-guide-datapath/#authentication_3","title":"Authentication","text":"<p>To authenticate with the zot server, log in at the start of your session using the following command:</p> <pre><code>$ helm registry login -u myUsername localhost:5000\n</code></pre> <p>You will be prompted to manually enter a password.</p>"},{"location":"user-guides/user-guide-datapath/#common-tasks-using-crane-for-oci-images","title":"Common tasks using crane for OCI images","text":"<p>crane is an open-source project that provides a command-line interface (CLI) for interacting with container registries, such as Docker Hub and Google Container Registry.</p>  <p> For detailed information about <code>crane</code> commands, see the crane Documentation.</p>"},{"location":"user-guides/user-guide-datapath/#push-an-oci-image_2","title":"Push an OCI image","text":"<p>This example pushes the latest container image for the <code>alpine</code> application to a  registry.</p> <pre><code>$ crane --insecure push \\\n   oci/images/alpine:latest \\\n   localhost:5000/alpine:latest\n</code></pre>"},{"location":"user-guides/user-guide-datapath/#pull-an-oci-image_2","title":"Pull an OCI image","text":"<p>This example pulls the latest container image for the <code>alpine</code> application and stores the image to a local OCI-layout directory (<code>/oci/images</code>).</p> <pre><code>$ crane --insecure pull \\\n   --format oci \\\n   localhost:5000/alpine:latest \\\n   oci/images/alpine:latest\n</code></pre>"},{"location":"user-guides/user-guide-datapath/#copy-an-oci-image-to-a-private-docker-registry","title":"Copy an OCI image to a private docker registry","text":"<p>This example pulls the latest container image for the <code>alpine</code> application and stores the image to a local private docker registry.</p> <pre><code>$ crane --insecure copy \\\n   alpine:latest \\\n   localhost:5000/alpine:latest\n</code></pre>"},{"location":"user-guides/user-guide-datapath/#list-tags_1","title":"List tags","text":"<p>This example lists all tags in the <code>alpine</code> image within the registry.</p> <pre><code>$ crane ls localhost:5000/alpine\n</code></pre>"},{"location":"user-guides/user-guide-datapath/#find-the-digest-of-an-image","title":"Find the digest of an image","text":"<p>This example gets the digest of the <code>alpine</code> image within the registry.</p> <pre><code>$ crane digest localhost:5000/alpine:latest\n</code></pre>"},{"location":"user-guides/user-guide-datapath/#authentication_4","title":"Authentication","text":"<p>To authenticate with the registry server, log in at the start of your session using the following command:</p> <pre><code>$ crane auth login -u myUsername localhost:5000\n</code></pre>"},{"location":"user-guides/zli/","title":"Using the command line interface (zli)","text":"<p> zli: The command line tool for zot servers</p>"},{"location":"user-guides/zli/#what-is-zli","title":"What is zli?","text":"<p>zli is a binary that implements a set of command line commands for interacting with the zot registry server.</p>  <p> We recommend installing zli when you install zot.</p>"},{"location":"user-guides/zli/#how-to-get-zli","title":"How to get zli","text":"<p>zli is hosted with zot on GitHub at project-zot. From GitHub, you can download the zli binary or you can build zli from the source.</p>"},{"location":"user-guides/zli/#supported-platforms","title":"Supported platforms","text":"<p>zli is supported for the following operating systems and platform architectures:</p>    OS ARCH Platform     linux amd64 Intel-based Linux servers   linux arm64 ARM-based servers and Raspberry Pi4   darwin amd64 Intel-based MacOS   darwin arm64 ARM-based MacOS"},{"location":"user-guides/zli/#downloading-zli-binaries","title":"Downloading zli binaries","text":"<p>You can download the executable binary for your server platform and architecture under \"Assets\" on the GitHub zot releases page.</p> <p>The binary image is named using the OS and architecture from the Supported platforms table. For example, the binary for an Intel-based MacOS server is <code>zli-darwin-amd64.</code></p>"},{"location":"user-guides/zli/#building-zli-from-source","title":"Building zli from source","text":"<p>To build the zli binary, copy or clone the zot project from GitHub and execute the <code>make cli</code> command in the <code>zot</code> directory. Use the same command options that you used to build zot, as shown:</p> <p><code>make OS=os ARCH=architecture cli</code></p> <p>For example, the following command builds zli for an Intel-based MacOS server:</p> <pre><code>make OS=darwin ARCH=amd64 cli\n</code></pre> <p>In this example, the resulting executable file is <code>zli-darwin-amd64</code> in the <code>zot/bin</code> directory.</p>"},{"location":"user-guides/zli/#common-tasks-using-zli","title":"Common tasks using zli","text":"<p>This section includes examples of common zot server tasks using the zli command line interface. For a detailed listing of zli commands, see the zli Command Reference in this guide.</p>  <p> The original filename of the zli executable file will reflect the build options, such as <code>zli-linux-amd64</code>. For convenience, you can rename the executable to simply <code>zli</code>. The instructions and examples in this guide use <code>zli</code> as the name of the executable file.</p>"},{"location":"user-guides/zli/#adding-a-zot-server-url","title":"Adding a zot server URL","text":"<p>You can modify the zot server configuration using the <code>zli config add</code> command. This example adds a zot server URL with an alias of <code>remote-zot</code>:</p> <pre><code>bin/zli config add remote-zot https://server-example:8080\n</code></pre> <p>Use the <code>zli config</code> command to list all configured URLs with their aliases:</p> <pre><code>$ bin/zli config -l\n\nremote-zot   https://server-example:8080\nlocal        http://localhost:8080\n</code></pre>"},{"location":"user-guides/zli/#listing-images","title":"Listing images","text":"<p>You can list all images hosted on a zot server using the <code>zli images</code> command with the server\u2019s alias:</p> <pre><code>$ bin/zli images remote-zot\n\nIMAGE NAME        TAG               DIGEST    SIZE\npostgres          9.6.18-alpine     ef27f3e1  14.4MB\npostgres          9.5-alpine        264450a7  14.4MB\nbusybox           latest            414aeb86  707.8KB\n</code></pre> <p>You can also filter the image list to view a specific image by specifying the image name:</p> <pre><code>$ bin/zli images remote-zot -n busybox\n\nIMAGE NAME        TAG               DIGEST    SIZE\nbusybox           latest            414aeb86  707.8KB\n</code></pre>"},{"location":"user-guides/zli/#scanning-images-for-known-vulnerabilities","title":"Scanning images for known vulnerabilities","text":"<p>Using the <code>zli cve</code> command, you can fetch the CVE (Common Vulnerabilities and Exposures) information for images hosted on the zot server. This example shows how to learn which images are affected by a specific CVE:</p> <pre><code>$ bin/zli cve remote-zot -i CVE-2017-9935\n\nIMAGE NAME        TAG               DIGEST    SIZE\nc3/openjdk-dev    commit-5be4d92    ac3762e2  335MB\n</code></pre> <p>This example displays a list all CVEs affecting a specific image:</p> <pre><code>$ bin/zli cve remote-zot -I c3/openjdk-dev:0.3.19\n\nID                SEVERITY  TITLE\nCVE-2015-8540     LOW       libpng: underflow read in png_check_keyword()\nCVE-2017-16826    LOW       binutils: Invalid memory access in the coff_s...\n</code></pre> <p>This example displays the detailed CVEs in JSON format:</p> <pre><code>$ bin/zli cve remote-zot -I c3/openjdk-dev:0.3.19 -o json\n{\n  \"Tag\": \"0.3.19\",\n  \"CVEList\": [\n    {\n      \"Id\": \"CVE-2019-17006\",\n      \"Severity\": \"MEDIUM\",\n      \"Title\": \"nss: Check length of inputs for cryptographic primitives\",\n      \"Description\": \"A vulnerability was discovered in nss where input text length was not checked when using certain cryptographic primitives. This could lead to a heap-buffer overflow resulting in a crash and data leak. The highest threat is to confidentiality and integrity of data as well as system availability.\",\n      \"PackageList\": [\n        {\n          \"Name\": \"nss\",\n          \"InstalledVersion\": \"3.44.0-7.el7_7\",\n          \"FixedVersion\": \"Not Specified\"\n        },\n        {\n          \"Name\": \"nss-sysinit\",\n          \"InstalledVersion\": \"3.44.0-7.el7_7\",\n          \"FixedVersion\": \"Not Specified\"\n        },\n        {\n          \"Name\": \"nss-tools\",\n          \"InstalledVersion\": \"3.44.0-7.el7_7\",\n          \"FixedVersion\": \"Not Specified\"\n        }]\n    }]\n}\n</code></pre> <p>This example lists all images on a specific zot server that are affected by a specific CVE:</p> <pre><code>$ bin/zli cve remote-zot -I c3/openjdk-dev -i CVE-2017-9935\n\nIMAGE NAME        TAG               DIGEST    SIZE\nc3/openjdk-dev    commit-2674e8a    71046748  338MB\nc3/openjdk-dev    commit-bd5cc94    0ab7fc76\n</code></pre> <p>This example lists all images on a specific zot server where the CVE has been fixed:</p> <pre><code>$ bin/zli cve remote-zot -I c3/openjdk-dev -i CVE-2017-9935 --fixed\n\nIMAGE NAME        TAG                       DIGEST    SIZE\nc3/openjdk-dev    commit-2674e8a-squashfs   b545b8ba  321MB\nc3/openjdk-dev    commit-d5024ec-squashfs   cd45f8cf  321MB\n</code></pre>"},{"location":"user-guides/zli/#listing-repositories","title":"Listing repositories","text":"<p>You can list all repositories hosted on a zot server using the <code>zli repos</code> command with the server\u2019s alias:</p> <pre><code>Searching... \ud83c\udf0d\n\nREPOSITORY NAME\nalpine\nbusybox\n</code></pre>"},{"location":"user-guides/zli/#command-reference","title":"Command reference","text":""},{"location":"user-guides/zli/#zli","title":"zli","text":"<pre><code>$ bin/zli --help\n\nUsage:\n  zli [flags]\n  zli [command]\n\nAvailable Commands:\n  completion  Generate the autocompletion script for the specified shell\n  config      Configure zot registry parameters for CLI\n  cve         Lookup CVEs in images hosted on the zot registry\n  help        Help about any command\n  images      List images hosted on the zot registry\n\nFlags:\n  -h, --help      help for zli\n  -v, --version   show the version and exit\n\nUse \"zli [command] --help\" for more information about a command.\n</code></pre>"},{"location":"user-guides/zli/#zli-completion","title":"zli completion","text":"<p>This command generates the autocompletion script for <code>zli</code> for the specified shell. See each sub-command\u2019s help for details on how to use the generated script.</p> <pre><code>$ bin/zli completion --help\n\nUsage:\n  zli completion [command]\n\nAvailable Commands:\n  bash        Generate the autocompletion script for bash\n  fish        Generate the autocompletion script for fish\n  powershell  Generate the autocompletion script for powershell\n  zsh         Generate the autocompletion script for zsh\n\nFlags:\n  -h, --help   help for completion\n\nUse \"zli completion [command] --help\" for more information about a command.\n</code></pre>"},{"location":"user-guides/zli/#zli-config","title":"zli config","text":"<p>This command modifies and lists modified settings for a running zot registry.</p> <pre><code>$ bin/zli config --help\n\nUsage:\n  zli config &lt;config-name&gt; [variable] [value] [flags]\n  zli config [command]\n\nExamples:\n  zli config add main https://zot-foo.com:8080\n  zli config main url\n  zli config main --list\n  zli config --list\n\nAvailable Commands:\n  add         Add configuration for a zot registry\n\nFlags:\n  -h, --help    help for config\n  -l, --list    List configurations\n      --reset   Reset a variable value\n\nUse \"zli config [command] --help\" for more information about a command.\n\nUseful variables:\n  url       zot server URL\n  showspinner   show spinner while loading data [true/false]\n  verify-tls    enable TLS certificate verification of the server [default: true]\n</code></pre>"},{"location":"user-guides/zli/#zli-cve","title":"zli cve","text":"<p>This command lists CVEs (Common Vulnerabilities and Exposures) of images hosted on the zot registry</p> <pre><code>$ ./zli cve --help\n\nUsage:\n  zli cve [config-name] [flags]\n\nFlags:\n  -i, --cve-id string   List images affected by a CVE\n      --fixed           List tags which have fixed a CVE\n  -h, --help            help for cve\n  -I, --image string    List CVEs by IMAGENAME[:TAG]\n  -o, --output string   Specify output format [text/json/yaml]. JSON and YAML format return all info for CVEs\n      --url string      Specify zot server URL if config-name is not mentioned\n  -u, --user string     User Credentials of zot server in USERNAME:PASSWORD format\n</code></pre>"},{"location":"user-guides/zli/#zli-images","title":"zli images","text":"<p>This command lists images hosted on the zot registry.</p> <pre><code>$ ./zli images --help\n\nUsage:\n  zli images [config-name] [flags]\n\nFlags:\n  -d, --digest string   List images containing a specific manifest, config, or layer digest\n  -h, --help            help for images\n  -n, --name string     List image details by name\n  -o, --output string   Specify output format [text/json/yaml]\n      --url string      Specify zot server URL if config-name is not mentioned\n  -u, --user string     User Credentials of zot server in \"username:password\" format\n      --verbose         Show verbose output\n\nRun 'zli config -h' for details on [config-name] argument\n</code></pre>"},{"location":"user-guides/zli/#zli-repos","title":"zli repos","text":"<p>This command lists all repositories in the zot registry.</p> <pre><code>$ ./zli repos --help\n\nUsage:\n  zli repos [config-name] [flags]\n\nFlags:\n  -h, --help          help for repos\n      --url string    Specify zot server URL if config-name is not mentioned\n  -u, --user string   User Credentials of zot server in \"username:password\" format\n\nRun 'zli config -h' for details on [config-name] argument\n</code></pre>"}]}